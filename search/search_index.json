{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spatial K Spatial K is a set of libraries for working with geospatial data in Kotlin inlcuding an implementation of GeoJson and a port of Turfjs written in pure Kotlin. It supports Kotlin Multiplatform and Java projects while also featuring a Kotlin DSL for building GeoJson objects. Installation Java and Kotlin/JVM dependencies { implementation \"io.github.dellisd.spatialk:geojson:0.1.0\" implementation \"io.github.dellisd.spatialk:turf:0.1.0\" // Kotlin only implementation \"io.github.dellisd.spatialk:geojson-dsl:0.1.0\" } Kotlin Multiplatform commonMain { dependencies { implementation \"io.github.dellisd.spatialk:geojson:0.1.0\" implementation \"io.github.dellisd.spatialk:turf:0.1.0\" implementation \"io.github.dellisd.spatialk:geojson-dsl:0.1.0\" } } Snapshots Snapshot builds are available on Sonatype. repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } Supported targets Spatial K currently supports the following platform targets: jvm , js , mingwX64 , linuxX64 , macosX64 , iosX64 , iosArm64 , and iosArm32 .","title":"Introduction"},{"location":"#spatial-k","text":"Spatial K is a set of libraries for working with geospatial data in Kotlin inlcuding an implementation of GeoJson and a port of Turfjs written in pure Kotlin. It supports Kotlin Multiplatform and Java projects while also featuring a Kotlin DSL for building GeoJson objects.","title":"Spatial K"},{"location":"#installation","text":"","title":"Installation"},{"location":"#java-and-kotlinjvm","text":"dependencies { implementation \"io.github.dellisd.spatialk:geojson:0.1.0\" implementation \"io.github.dellisd.spatialk:turf:0.1.0\" // Kotlin only implementation \"io.github.dellisd.spatialk:geojson-dsl:0.1.0\" }","title":"Java and Kotlin/JVM"},{"location":"#kotlin-multiplatform","text":"commonMain { dependencies { implementation \"io.github.dellisd.spatialk:geojson:0.1.0\" implementation \"io.github.dellisd.spatialk:turf:0.1.0\" implementation \"io.github.dellisd.spatialk:geojson-dsl:0.1.0\" } }","title":"Kotlin Multiplatform"},{"location":"#snapshots","text":"Snapshot builds are available on Sonatype. repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } }","title":"Snapshots"},{"location":"#supported-targets","text":"Spatial K currently supports the following platform targets: jvm , js , mingwX64 , linuxX64 , macosX64 , iosX64 , iosArm64 , and iosArm32 .","title":"Supported targets"},{"location":"geojson-dsl/","text":"GeoJson DSL The geojson-dsl library provides a Kotlin DSL for constructing GeoJson objects from the geojson library. Installation dependencies { implementation \"io.github.dellisd.spatialk:geojson-dsl:0.1.0\" } DSL Geometry Each geometry type has a corresponding DSL. A GeoJson object's bbox value can be assigned in any of the DSLs. Point Kotlin point ( longitude = - 75.0 , latitude = 45.0 , altitude = 100.0 ) JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] } MultiPoint The MultiPoint DSL uses the unary plus operator to add Position instances as positions in the geometry. This means that it is possible to add Point objects as well as LngLat objects as positions to a MultiPoint . Kotlin multiPoint { + point (- 75.0 , 45.0 ) + LngLat (- 78.0 , 44.0 ) } JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [ [ -75.0 , 45.0 ], [ -78.0 , 44.0 ] ] } LineString Like with MultiPoint , the LineString DSL uses the unary plus operator to add positions as part of the line. The order in which positions are added to the LineString is the order that the LineString will follow. Kotlin lineString { + LngLat ( 45.0 , 45.0 ) + LngLat ( 0.0 , 0.0 ) } JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] } MultiLineString The MultiLineString DSL uses the unary plus operator to add multiple line strings. The LineString DSL can be used to create LineString objects to add. Kotlin val simpleLine = lineString { + LngLat ( 45.0 , 45.0 ) + LngLat ( 0.0 , 0.0 ) } multiLineString { + simpleLine // Inline LineString creation + lineString { + LngLat ( 44.4 , 55.5 ) + LngLat ( 55.5 , 66.6 ) } } JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]], [[ 44.4 , 55.5 ], [ 55.5 , 66.6 ]] ] } Polygon The Polygon DSL is used by specifying linear rings that make up the polygon's shape and holes. The first ring is the exterior ring with four or more positions. The last position must be the same as the first position. All ring s that follow will represent interior rings (i.e. holes) in the polygon. For convenience, the complete() function can be used to \"complete\" a ring. It adds the last position in the ring by copying the first position that was added. Kotlin val simpleLine = lineString { + LngLat ( 45.0 , 45.0 ) + LngLat ( 0.0 , 0.0 ) } polygon { ring { // LineStrings can be used as part of a ring + simpleLine + LngLat ( 12.0 , 12.0 ) complete () } ring { + LngLat ( 4.0 , 4.0 ) + LngLat ( 2.0 , 2.0 ) + LngLat ( 3.0 , 3.0 ) complete () } } JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] } MultiPolygon Like with previous \"Multi\" geometries, the unary plus operator is used to add multipl Polygon objects. The Polygon DSL can also be used here. Kotlin val simplePolygon = previousExample () multiPolygon { + simplePolygon + polygon { ring { + LngLat ( 12.0 , 0.0 ) + LngLat ( 0.0 , 12.0 ) + LngLat (- 12.0 , 0.0 ) + LngLat ( 5.0 , 5.0 ) complete () } } } JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ], [ [[ 12.0 , 0.0 ], [ 0.0 , 12.0 ], [ -12.0 , 0.0 ], [ 5.0 , 5.0 ], [ 12.0 , 0.0 ]] ] ] } Geometry Collection The unary plus operator can be used to add any geometry to a GeometryCollection . Kotlin val simplePoint : Point = previousPoint () val simpleLine : LineString = previousLineString () val simplePolygon : Polygon = previousPolygon () geometryCollection { + simplePoint + simpleLine + simplePolygon } JSON { \"type\" : \"GeometryCollection\" , \"geometries\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] }, { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] } ] } Feature The Feature DSL can construct a Feature object with a geometry, a set of properties, a bounding box, and an id. Kotlin feature { geometry = point (- 75.0 , 45.0 ) id = \"point1\" bbox = BoundingBox (- 76.9 , 44.1 , - 74.2 , 45.7 ) properties { \"name\" to \"Hello World\" \"value\" to 13 \"cool\" to true } } JSON { \"type\" : \"Feature\" , \"id\" : \"point1\" , \"bbox\" : [ -76.9 , 44.1 , -74.2 , 45.7 ], \"properties\" : { \"name\" : \"Hello World\" , \"value\" : 13 , \"cool\" : true }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] } } Feature Collection A FeatureCollection is constructed by adding multiple Feature objects using the unary plus operator. Kotlin featureCollection { + feature { geometry = point (- 75.0 , 45.0 ) } } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] }, \"properties\" : {} } ] }","title":"GeoJson DSL"},{"location":"geojson-dsl/#geojson-dsl","text":"The geojson-dsl library provides a Kotlin DSL for constructing GeoJson objects from the geojson library.","title":"GeoJson DSL"},{"location":"geojson-dsl/#installation","text":"dependencies { implementation \"io.github.dellisd.spatialk:geojson-dsl:0.1.0\" }","title":"Installation"},{"location":"geojson-dsl/#dsl","text":"","title":"DSL"},{"location":"geojson-dsl/#geometry","text":"Each geometry type has a corresponding DSL. A GeoJson object's bbox value can be assigned in any of the DSLs.","title":"Geometry"},{"location":"geojson-dsl/#point","text":"Kotlin point ( longitude = - 75.0 , latitude = 45.0 , altitude = 100.0 ) JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] }","title":"Point"},{"location":"geojson-dsl/#multipoint","text":"The MultiPoint DSL uses the unary plus operator to add Position instances as positions in the geometry. This means that it is possible to add Point objects as well as LngLat objects as positions to a MultiPoint . Kotlin multiPoint { + point (- 75.0 , 45.0 ) + LngLat (- 78.0 , 44.0 ) } JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [ [ -75.0 , 45.0 ], [ -78.0 , 44.0 ] ] }","title":"MultiPoint"},{"location":"geojson-dsl/#linestring","text":"Like with MultiPoint , the LineString DSL uses the unary plus operator to add positions as part of the line. The order in which positions are added to the LineString is the order that the LineString will follow. Kotlin lineString { + LngLat ( 45.0 , 45.0 ) + LngLat ( 0.0 , 0.0 ) } JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] }","title":"LineString"},{"location":"geojson-dsl/#multilinestring","text":"The MultiLineString DSL uses the unary plus operator to add multiple line strings. The LineString DSL can be used to create LineString objects to add. Kotlin val simpleLine = lineString { + LngLat ( 45.0 , 45.0 ) + LngLat ( 0.0 , 0.0 ) } multiLineString { + simpleLine // Inline LineString creation + lineString { + LngLat ( 44.4 , 55.5 ) + LngLat ( 55.5 , 66.6 ) } } JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]], [[ 44.4 , 55.5 ], [ 55.5 , 66.6 ]] ] }","title":"MultiLineString"},{"location":"geojson-dsl/#polygon","text":"The Polygon DSL is used by specifying linear rings that make up the polygon's shape and holes. The first ring is the exterior ring with four or more positions. The last position must be the same as the first position. All ring s that follow will represent interior rings (i.e. holes) in the polygon. For convenience, the complete() function can be used to \"complete\" a ring. It adds the last position in the ring by copying the first position that was added. Kotlin val simpleLine = lineString { + LngLat ( 45.0 , 45.0 ) + LngLat ( 0.0 , 0.0 ) } polygon { ring { // LineStrings can be used as part of a ring + simpleLine + LngLat ( 12.0 , 12.0 ) complete () } ring { + LngLat ( 4.0 , 4.0 ) + LngLat ( 2.0 , 2.0 ) + LngLat ( 3.0 , 3.0 ) complete () } } JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] }","title":"Polygon"},{"location":"geojson-dsl/#multipolygon","text":"Like with previous \"Multi\" geometries, the unary plus operator is used to add multipl Polygon objects. The Polygon DSL can also be used here. Kotlin val simplePolygon = previousExample () multiPolygon { + simplePolygon + polygon { ring { + LngLat ( 12.0 , 0.0 ) + LngLat ( 0.0 , 12.0 ) + LngLat (- 12.0 , 0.0 ) + LngLat ( 5.0 , 5.0 ) complete () } } } JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ], [ [[ 12.0 , 0.0 ], [ 0.0 , 12.0 ], [ -12.0 , 0.0 ], [ 5.0 , 5.0 ], [ 12.0 , 0.0 ]] ] ] }","title":"MultiPolygon"},{"location":"geojson-dsl/#geometry-collection","text":"The unary plus operator can be used to add any geometry to a GeometryCollection . Kotlin val simplePoint : Point = previousPoint () val simpleLine : LineString = previousLineString () val simplePolygon : Polygon = previousPolygon () geometryCollection { + simplePoint + simpleLine + simplePolygon } JSON { \"type\" : \"GeometryCollection\" , \"geometries\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 , 100.0 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ]] }, { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ 45.0 , 45.0 ], [ 0.0 , 0.0 ], [ 12.0 , 12.0 ], [ 45.0 , 45.0 ]], [[ 4.0 , 4.0 ], [ 2.0 , 2.0 ], [ 3.0 , 3.0 ], [ 4.0 , 4.0 ]] ] } ] }","title":"Geometry Collection"},{"location":"geojson-dsl/#feature","text":"The Feature DSL can construct a Feature object with a geometry, a set of properties, a bounding box, and an id. Kotlin feature { geometry = point (- 75.0 , 45.0 ) id = \"point1\" bbox = BoundingBox (- 76.9 , 44.1 , - 74.2 , 45.7 ) properties { \"name\" to \"Hello World\" \"value\" to 13 \"cool\" to true } } JSON { \"type\" : \"Feature\" , \"id\" : \"point1\" , \"bbox\" : [ -76.9 , 44.1 , -74.2 , 45.7 ], \"properties\" : { \"name\" : \"Hello World\" , \"value\" : 13 , \"cool\" : true }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] } }","title":"Feature"},{"location":"geojson-dsl/#feature-collection","text":"A FeatureCollection is constructed by adding multiple Feature objects using the unary plus operator. Kotlin featureCollection { + feature { geometry = point (- 75.0 , 45.0 ) } } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75.0 , 45.0 ] }, \"properties\" : {} } ] }","title":"Feature Collection"},{"location":"geojson/","text":"GeoJson The geojson module contains an implementation of the GeoJson standard . In Kotlin projects, it's recommended to use the DSL for constructing GeoJson objects which is available in the geojson-dsl module. Installation dependencies { implementation \"io.github.dellisd.spatialk:geojson:0.1.0\" } GeoJson Objects The GeoJson interface represents all GeoJson objects. All GeoJson objects can have a bbox property specified on them which is a BoundingBox that represents the bounds of that object's geometry. Geometry Geometry objects are a sealed hierarchy of classes that inherit from the Geometry class. This allows for exhaustive type checks in Kotlin using a when block. Kotlin val geometry : Geometry = getGeometry () val type = when ( geometry ) { is Point -> \"Point\" is MultiPoint -> \"MultiPoint\" is LineString -> \"LineString\" is MultiLineString -> \"MultiLineString\" is Polygon -> \"Polygon\" is MultiPolygon -> \"MultiPolygon\" is GeometryCollection -> \"GeometryCollection\" } All seven types of GeoJSON geometries are implemented and summarized below. Full documentation can be found in the API pages . Position Positions are implemented as an interface where the longitude, latitude, and optionally an altitude are accessible as properties. The basic implementation of the Position interface is the LngLat class. Kotlin val position : Position = LngLat (- 75.0 , 45.0 ) // Access values position . longitude position . latitude position . altitude // null if unspecified Java Position position = new LngLat ( - 75.0 , 45.0 ); // Access values position . getLongitude (); position . getLatitude (); position . getAltitude (); // null if unspecified JSON [ -75 , 45 ] Point A Point is a single Position. The Point class implements the Position interface. Kotlin val point = Point ( LngLat (- 75.0 , 45.0 )) println ( point . longitude ) // Prints: -75.0 Java Point point = new Point ( new LngLat ( - 75.0 , 45.0 )); System . out . println ( point . getLongitude ()); // Prints: -75.0 JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] } MultiPoint A MultiPoint is an array of Positions. Kotlin val multiPoint = MultiPoint ( LngLat (- 75.0 , 45.0 ), LngLat (- 79.0 , 44.0 )) Java MultiPoint multiPoint = new MultiPoint ( new LngLat ( - 75.0 , 45.0 ), new LngLat ( - 79.0 , 44.0 ) ); JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } LineString A LineString is a sequence of two or more Positions. Kotlin val lineString = LineString ( LngLat (- 75.0 , 45.0 ), LngLat (- 79.0 , 44.0 )) Java LineString lineString = new LineString ( new LngLat ( - 75.0 , 45.0 ), new LngLat ( - 79.0 , 44.0 ) ); JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } MultiLineString A MultiLineString is an array of LineStrings. Kotlin val multiLineString = MultiLineString ( listOf ( LngLat ( 12.3 , 45.6 ), LngLat ( 78.9 , 12.3 )), listOf ( LngLat ( 87.6 , 54.3 ), LngLat ( 21.9 , 56.4 )) ) Java ArrayList < LngLat > list1 = new ArrayList <> (); list1 . add ( new LngLat ( 12.3 , 45.6 )); list1 . add ( new LngLat ( 78.9 , 12.3 )); ArrayList < LngLat > list2 = new ArrayList <> (); list2 . add ( new LngLat ( 87.6 , 54.3 )); list2 . add ( new LngLat ( 21.9 , 56.4 )) MultiLineString multiLineString = new MultiLineString ( list1 , list2 ); JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 12.3 , 45.6 ], [ 78.9 , 12.3 ]], [[ 87.6 , 54.3 ], [ 21.9 , 56.4 ]] ] } Polygon A Polygon is an array of rings. Each ring is a sequence of points with the last point matching the first point to indicate a closed area. The first ring defines the outer shape of the polygon, while all the following rings define \"holes\" inside the polygon. Kotlin val polygon = Polygon ( listOf ( LngLat (- 79.87 , 43.42 ), LngLat (- 78.89 , 43.49 ), LngLat (- 79.07 , 44.02 ), LngLat (- 79.95 , 43.87 ), LngLat (- 79.87 , 43.42 ) ), listOf ( LngLat (- 79.75 , 43.81 ), LngLat (- 79.56 , 43.85 ), LngLat (- 79.7 , 43.88 ), LngLat (- 79.75 , 43.81 ) ) ) Java ArrayList < LngLat > ring1 = new ArrayList <> (); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ring1 . add ( new LngLat ( - 78.89 , 43.49 )); ring1 . add ( new LngLat ( - 79.07 , 44.02 )); ring1 . add ( new LngLat ( - 79.95 , 43.87 )); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ArrayList < LngLat > ring2 = new ArrayList <> (); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); ring2 . add ( new LngLat ( - 79.56 , 43.85 )); ring2 . add ( new LngLat ( - 79.7 , 43.88 )); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); Polygon polygon = new Polygon ( ring1 , ring2 ); JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] } MultiPolygon A MultiPolygon is an array of Polygons. Kotlin val polygon = listOf ( LngLat (- 79.87 , 43.42 ), LngLat (- 78.89 , 43.49 ), LngLat (- 79.07 , 44.02 ), LngLat (- 79.95 , 43.87 ), LngLat (- 79.87 , 43.42 ) ), listOf ( LngLat (- 79.75 , 43.81 ), LngLat (- 79.56 , 43.85 ), LngLat (- 79.7 , 43.88 ), LngLat (- 79.75 , 43.81 ) ) val multiPolygon = MultiPolygon ( polygon , polygon ) Java ArrayList < LngLat > ring1 = new ArrayList <> (); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ring1 . add ( new LngLat ( - 78.89 , 43.49 )); ring1 . add ( new LngLat ( - 79.07 , 44.02 )); ring1 . add ( new LngLat ( - 79.95 , 43.87 )); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ArrayList < LngLat > ring2 = new ArrayList <> (); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); ring2 . add ( new LngLat ( - 79.56 , 43.85 )); ring2 . add ( new LngLat ( - 79.7 , 43.88 )); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); ArrayList < ArrayList < LngLat > polygon = new ArrayList <> (); polygon . add ( ring1 ); polygon . add ( ring2 ); MultiPolygon multiPolygon = new MultiPolygon ( polygon , polygon ); JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ], [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] ] } GeometryCollection A GeometryCollection is a collection of different types of Geometry. It implements the Collection interface and can be used in any place that a collection can be used. Kotlin val geometryCollection = GeometryCollection ( point , lineString ) // Can be iterated over, and used in any way a Collection<T> can be geometryCollection . forEach { geometry -> // ... } Java GeometryCollection = new GeometryCollection ( point , lineString ); // Can be iterated over, and used in any way a Collection<T> can be for ( Geometry geometry : geometryCollection ) { // ... } JSON { \"type\" : \"GeometryCollection\" , \"coordinates\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } ] } Feature A Feature can contain a Geometry object, as well as a set of data properties, and optionally a commonly used identifier ( id ). A feature's properties are stored as a map of JsonElement objects from kotlinx.serialization . A set of helper methods to get and set properties with the appropriate types directly. Kotlin val feature = Feature ( point ) feature . setNumberProperty ( \"size\" , 9999 ) val size : Number ? = feature . getNumberProperty ( \"size\" ) // 9999 val geometry : Geometry ? = feature . geometry // point Java Feature feature = new Feature ( point ); feature . setNumberProperty ( \"size\" , 9999 ); Number size = feature . getNumberProperty ( \"size\" ); // 9999 Geometry geometry = feature . getGeometry (); // point JSON { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } } FeatureCollection A FeatureCollection is a collection of multiple features. FeatureCollection implements the Collection interface and can be used in any place that a collection can be used. Kotlin val featureCollection = FeatureCollection ( pointFeature ) featureCollection . forEach { feature -> // ... } Java FeatureCollection featureCollection = new FeatureCollection ( pointFeature ); for ( Feature feature : featureCollection ) { // ... } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } } ] } BoundingBox The BoundingBox class is used to represent the bounding boxes that can be set for any GeoJson object. They are represented by two positions: the southwest, and northeastern points of the bounded area. Kotlin val bbox = BoundingBox ( west = 11.6 , south = 45.1 , east = 12.7 , north = 45.7 ) Java BoundingBox bbox = new BoundingBox ( 11.6 , 45.1 , 12.7 , 45.7 ); JSON [ 11.6 , 45.1 , 12.7 , 45.7 ] Serialization Serialization is done using kotlinx.serialization and the serializer for any object listed above can be obtained using the static .serializer() method. The Geometry sealed class hierarchy uses a polymorphic serializer, so the serializer for all types of geometry are simply obtained from Geometry.serializer() . To Json Any GeoJson object can be serialized to Json using the json property. Kotlin val featureCollection : FeatureCollection = getFeatureCollection () val json = featureCollection . json println ( json ) Java FeatureCollection featureCollection = getFeatureCollection (); String json = featureCollection . toJson (); System . out . println ( json ); From Json Json strings can be converted to GeoJson objects using various methods. Geometry Geometry can be converted from Json using generic functions that will automatically deserialize the given Json into the appropriate Geometry subclass. In Kotlin, these functions are available as extension functions on a String . In Java, these functions are available as static methods on GeometryFactory . Kotlin // Throws exception if the JSON cannot be deserialized to a Point val myPoint = \"{...geojson...}\" . toGeometry < Point >() // Returns null if an error occurs val nullable = \"{...not a point...}\" . toGeometryOrNull < Point >() Java // Throws exception if the JSON cannot be deserialized to a Point Point myPoint = GeometryFactory . fromJson ( \"{...geojson...}\" ); // Returns null if an error occurs Point nullable = GeometryFactory . fromJsonOrNull ( \"{... not a point...}\" ); Feature and FeatureCollection Feature and FeatureCollection objects can be converted from Json similarly. Kotlin val feature = \"{...feature...}\" . toFeature () val featureCollection = \"{...feature collection...}\" . toFeatureCollection () Java Feature feature = Feature . fromJson ( \"{...feature...}\" ); FeatureCollection = FeatureCollection . fromJson ( \"{...feature collection...}\" );","title":"GeoJson"},{"location":"geojson/#geojson","text":"The geojson module contains an implementation of the GeoJson standard . In Kotlin projects, it's recommended to use the DSL for constructing GeoJson objects which is available in the geojson-dsl module.","title":"GeoJson"},{"location":"geojson/#installation","text":"dependencies { implementation \"io.github.dellisd.spatialk:geojson:0.1.0\" }","title":"Installation"},{"location":"geojson/#geojson-objects","text":"The GeoJson interface represents all GeoJson objects. All GeoJson objects can have a bbox property specified on them which is a BoundingBox that represents the bounds of that object's geometry.","title":"GeoJson Objects"},{"location":"geojson/#geometry","text":"Geometry objects are a sealed hierarchy of classes that inherit from the Geometry class. This allows for exhaustive type checks in Kotlin using a when block. Kotlin val geometry : Geometry = getGeometry () val type = when ( geometry ) { is Point -> \"Point\" is MultiPoint -> \"MultiPoint\" is LineString -> \"LineString\" is MultiLineString -> \"MultiLineString\" is Polygon -> \"Polygon\" is MultiPolygon -> \"MultiPolygon\" is GeometryCollection -> \"GeometryCollection\" } All seven types of GeoJSON geometries are implemented and summarized below. Full documentation can be found in the API pages .","title":"Geometry"},{"location":"geojson/#position","text":"Positions are implemented as an interface where the longitude, latitude, and optionally an altitude are accessible as properties. The basic implementation of the Position interface is the LngLat class. Kotlin val position : Position = LngLat (- 75.0 , 45.0 ) // Access values position . longitude position . latitude position . altitude // null if unspecified Java Position position = new LngLat ( - 75.0 , 45.0 ); // Access values position . getLongitude (); position . getLatitude (); position . getAltitude (); // null if unspecified JSON [ -75 , 45 ]","title":"Position"},{"location":"geojson/#point","text":"A Point is a single Position. The Point class implements the Position interface. Kotlin val point = Point ( LngLat (- 75.0 , 45.0 )) println ( point . longitude ) // Prints: -75.0 Java Point point = new Point ( new LngLat ( - 75.0 , 45.0 )); System . out . println ( point . getLongitude ()); // Prints: -75.0 JSON { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }","title":"Point"},{"location":"geojson/#multipoint","text":"A MultiPoint is an array of Positions. Kotlin val multiPoint = MultiPoint ( LngLat (- 75.0 , 45.0 ), LngLat (- 79.0 , 44.0 )) Java MultiPoint multiPoint = new MultiPoint ( new LngLat ( - 75.0 , 45.0 ), new LngLat ( - 79.0 , 44.0 ) ); JSON { \"type\" : \"MultiPoint\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] }","title":"MultiPoint"},{"location":"geojson/#linestring","text":"A LineString is a sequence of two or more Positions. Kotlin val lineString = LineString ( LngLat (- 75.0 , 45.0 ), LngLat (- 79.0 , 44.0 )) Java LineString lineString = new LineString ( new LngLat ( - 75.0 , 45.0 ), new LngLat ( - 79.0 , 44.0 ) ); JSON { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] }","title":"LineString"},{"location":"geojson/#multilinestring","text":"A MultiLineString is an array of LineStrings. Kotlin val multiLineString = MultiLineString ( listOf ( LngLat ( 12.3 , 45.6 ), LngLat ( 78.9 , 12.3 )), listOf ( LngLat ( 87.6 , 54.3 ), LngLat ( 21.9 , 56.4 )) ) Java ArrayList < LngLat > list1 = new ArrayList <> (); list1 . add ( new LngLat ( 12.3 , 45.6 )); list1 . add ( new LngLat ( 78.9 , 12.3 )); ArrayList < LngLat > list2 = new ArrayList <> (); list2 . add ( new LngLat ( 87.6 , 54.3 )); list2 . add ( new LngLat ( 21.9 , 56.4 )) MultiLineString multiLineString = new MultiLineString ( list1 , list2 ); JSON { \"type\" : \"MultiLineString\" , \"coordinates\" : [ [[ 12.3 , 45.6 ], [ 78.9 , 12.3 ]], [[ 87.6 , 54.3 ], [ 21.9 , 56.4 ]] ] }","title":"MultiLineString"},{"location":"geojson/#polygon","text":"A Polygon is an array of rings. Each ring is a sequence of points with the last point matching the first point to indicate a closed area. The first ring defines the outer shape of the polygon, while all the following rings define \"holes\" inside the polygon. Kotlin val polygon = Polygon ( listOf ( LngLat (- 79.87 , 43.42 ), LngLat (- 78.89 , 43.49 ), LngLat (- 79.07 , 44.02 ), LngLat (- 79.95 , 43.87 ), LngLat (- 79.87 , 43.42 ) ), listOf ( LngLat (- 79.75 , 43.81 ), LngLat (- 79.56 , 43.85 ), LngLat (- 79.7 , 43.88 ), LngLat (- 79.75 , 43.81 ) ) ) Java ArrayList < LngLat > ring1 = new ArrayList <> (); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ring1 . add ( new LngLat ( - 78.89 , 43.49 )); ring1 . add ( new LngLat ( - 79.07 , 44.02 )); ring1 . add ( new LngLat ( - 79.95 , 43.87 )); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ArrayList < LngLat > ring2 = new ArrayList <> (); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); ring2 . add ( new LngLat ( - 79.56 , 43.85 )); ring2 . add ( new LngLat ( - 79.7 , 43.88 )); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); Polygon polygon = new Polygon ( ring1 , ring2 ); JSON { \"type\" : \"Polygon\" , \"coordinates\" : [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] }","title":"Polygon"},{"location":"geojson/#multipolygon","text":"A MultiPolygon is an array of Polygons. Kotlin val polygon = listOf ( LngLat (- 79.87 , 43.42 ), LngLat (- 78.89 , 43.49 ), LngLat (- 79.07 , 44.02 ), LngLat (- 79.95 , 43.87 ), LngLat (- 79.87 , 43.42 ) ), listOf ( LngLat (- 79.75 , 43.81 ), LngLat (- 79.56 , 43.85 ), LngLat (- 79.7 , 43.88 ), LngLat (- 79.75 , 43.81 ) ) val multiPolygon = MultiPolygon ( polygon , polygon ) Java ArrayList < LngLat > ring1 = new ArrayList <> (); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ring1 . add ( new LngLat ( - 78.89 , 43.49 )); ring1 . add ( new LngLat ( - 79.07 , 44.02 )); ring1 . add ( new LngLat ( - 79.95 , 43.87 )); ring1 . add ( new LngLat ( - 79.87 , 43.42 )); ArrayList < LngLat > ring2 = new ArrayList <> (); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); ring2 . add ( new LngLat ( - 79.56 , 43.85 )); ring2 . add ( new LngLat ( - 79.7 , 43.88 )); ring2 . add ( new LngLat ( - 79.75 , 43.81 )); ArrayList < ArrayList < LngLat > polygon = new ArrayList <> (); polygon . add ( ring1 ); polygon . add ( ring2 ); MultiPolygon multiPolygon = new MultiPolygon ( polygon , polygon ); JSON { \"type\" : \"MultiPolygon\" , \"coordinates\" : [ [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ], [ [[ -79.87 , 43.42 ], [ -78.89 , 43.49 ], [ -79.07 , 44.02 ], [ -79.95 , 43.87 ], [ -79.87 , 43.42 ]], [[ -79.75 , 43.81 ], [ -79.56 , 43.85 ], [ -79.7 , 43.88 ], [ -79.75 , 43.81 ]] ] ] }","title":"MultiPolygon"},{"location":"geojson/#geometrycollection","text":"A GeometryCollection is a collection of different types of Geometry. It implements the Collection interface and can be used in any place that a collection can be used. Kotlin val geometryCollection = GeometryCollection ( point , lineString ) // Can be iterated over, and used in any way a Collection<T> can be geometryCollection . forEach { geometry -> // ... } Java GeometryCollection = new GeometryCollection ( point , lineString ); // Can be iterated over, and used in any way a Collection<T> can be for ( Geometry geometry : geometryCollection ) { // ... } JSON { \"type\" : \"GeometryCollection\" , \"coordinates\" : [ { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, { \"type\" : \"LineString\" , \"coordinates\" : [[ -75 , 45 ], [ -79 , 44 ]] } ] }","title":"GeometryCollection"},{"location":"geojson/#feature","text":"A Feature can contain a Geometry object, as well as a set of data properties, and optionally a commonly used identifier ( id ). A feature's properties are stored as a map of JsonElement objects from kotlinx.serialization . A set of helper methods to get and set properties with the appropriate types directly. Kotlin val feature = Feature ( point ) feature . setNumberProperty ( \"size\" , 9999 ) val size : Number ? = feature . getNumberProperty ( \"size\" ) // 9999 val geometry : Geometry ? = feature . geometry // point Java Feature feature = new Feature ( point ); feature . setNumberProperty ( \"size\" , 9999 ); Number size = feature . getNumberProperty ( \"size\" ); // 9999 Geometry geometry = feature . getGeometry (); // point JSON { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } }","title":"Feature"},{"location":"geojson/#featurecollection","text":"A FeatureCollection is a collection of multiple features. FeatureCollection implements the Collection interface and can be used in any place that a collection can be used. Kotlin val featureCollection = FeatureCollection ( pointFeature ) featureCollection . forEach { feature -> // ... } Java FeatureCollection featureCollection = new FeatureCollection ( pointFeature ); for ( Feature feature : featureCollection ) { // ... } JSON { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ -75 , 45 ] }, \"properties\" : { \"size\" : 9999 } } ] }","title":"FeatureCollection"},{"location":"geojson/#boundingbox","text":"The BoundingBox class is used to represent the bounding boxes that can be set for any GeoJson object. They are represented by two positions: the southwest, and northeastern points of the bounded area. Kotlin val bbox = BoundingBox ( west = 11.6 , south = 45.1 , east = 12.7 , north = 45.7 ) Java BoundingBox bbox = new BoundingBox ( 11.6 , 45.1 , 12.7 , 45.7 ); JSON [ 11.6 , 45.1 , 12.7 , 45.7 ]","title":"BoundingBox"},{"location":"geojson/#serialization","text":"Serialization is done using kotlinx.serialization and the serializer for any object listed above can be obtained using the static .serializer() method. The Geometry sealed class hierarchy uses a polymorphic serializer, so the serializer for all types of geometry are simply obtained from Geometry.serializer() .","title":"Serialization"},{"location":"geojson/#to-json","text":"Any GeoJson object can be serialized to Json using the json property. Kotlin val featureCollection : FeatureCollection = getFeatureCollection () val json = featureCollection . json println ( json ) Java FeatureCollection featureCollection = getFeatureCollection (); String json = featureCollection . toJson (); System . out . println ( json );","title":"To Json"},{"location":"geojson/#from-json","text":"Json strings can be converted to GeoJson objects using various methods.","title":"From Json"},{"location":"geojson/#geometry_1","text":"Geometry can be converted from Json using generic functions that will automatically deserialize the given Json into the appropriate Geometry subclass. In Kotlin, these functions are available as extension functions on a String . In Java, these functions are available as static methods on GeometryFactory . Kotlin // Throws exception if the JSON cannot be deserialized to a Point val myPoint = \"{...geojson...}\" . toGeometry < Point >() // Returns null if an error occurs val nullable = \"{...not a point...}\" . toGeometryOrNull < Point >() Java // Throws exception if the JSON cannot be deserialized to a Point Point myPoint = GeometryFactory . fromJson ( \"{...geojson...}\" ); // Returns null if an error occurs Point nullable = GeometryFactory . fromJsonOrNull ( \"{... not a point...}\" );","title":"Geometry"},{"location":"geojson/#feature-and-featurecollection","text":"Feature and FeatureCollection objects can be converted from Json similarly. Kotlin val feature = \"{...feature...}\" . toFeature () val featureCollection = \"{...feature collection...}\" . toFeatureCollection () Java Feature feature = Feature . fromJson ( \"{...feature...}\" ); FeatureCollection = FeatureCollection . fromJson ( \"{...feature collection...}\" );","title":"Feature and FeatureCollection"},{"location":"ported-functions/","text":"Ported Functions The following functions have been ported as of version 0.0.3-SNAPSHOT of this library. You can view porting progress for the next release here . Measurement along area bbox bboxPolygon bearing center centerOfMass destination distance envelope length midpoint pointOnFeature polygonTangents pointToLineDistance rhumbBearing rhumbDestination rhumbDistance square greatCircle Coordinate Mutation cleanCoords flip rewind round Use round or Math.round from the standard library instead. truncate Transformation bboxClip bezierSpline buffer circle clone concave convex difference dissolve intersect lineOffset simplify tessellate transformRotate transformTranslate transformScale union voronoi Feature Conversion combine explode flatten lineToPolygon polygonize polygonToLine Miscellaneous kinks lineArc lineChunk lineIntersect Partially implemented. lineOverlap lineSegment lineSlice lineSliceAlong lineSplit mask nearestPointOnLine sector shortestPath unkinkPolygon Helper Use geojson-dsl instead. Random randomPosition randomPoint randomLineString randomPolygon Data sample Interpolation interpolate isobands isolines planepoint tin Joins pointsWithinPolygon tag Grids hexGrid pointGrid squareGrid triangleGrid Classification nearestPoint Aggregation collect clustersDbscan clustersKmeans Meta coordAll coordEach coordReduce featureEach featureReduce flattenEach flattenReduce getCoord getCoords getGeom getType geomEach geomReduce propEach segmentEach segmentReduce getCluster clusterEach clusterReduce Assertations collectionOf containsNumber geojsonType featureOf Booleans booleanClockwise booleanContains booleanCrosses booleanDisjoint booleanEqual booleanOverlap booleanParallel booleanPointInPolygon booleanPointOnLine booleanWithin Unit Conversion bearingToAzimuth convertArea convertLength degreesToRadians lengthToRadians lengthToDegrees radiansToLength radiansToDegrees toMercator toWgs84","title":"Ported Functions"},{"location":"ported-functions/#ported-functions","text":"The following functions have been ported as of version 0.0.3-SNAPSHOT of this library. You can view porting progress for the next release here .","title":"Ported Functions"},{"location":"ported-functions/#measurement","text":"along area bbox bboxPolygon bearing center centerOfMass destination distance envelope length midpoint pointOnFeature polygonTangents pointToLineDistance rhumbBearing rhumbDestination rhumbDistance square greatCircle","title":"Measurement"},{"location":"ported-functions/#coordinate-mutation","text":"cleanCoords flip rewind round Use round or Math.round from the standard library instead. truncate","title":"Coordinate Mutation"},{"location":"ported-functions/#transformation","text":"bboxClip bezierSpline buffer circle clone concave convex difference dissolve intersect lineOffset simplify tessellate transformRotate transformTranslate transformScale union voronoi","title":"Transformation"},{"location":"ported-functions/#feature-conversion","text":"combine explode flatten lineToPolygon polygonize polygonToLine","title":"Feature Conversion"},{"location":"ported-functions/#miscellaneous","text":"kinks lineArc lineChunk lineIntersect Partially implemented. lineOverlap lineSegment lineSlice lineSliceAlong lineSplit mask nearestPointOnLine sector shortestPath unkinkPolygon","title":"Miscellaneous"},{"location":"ported-functions/#helper","text":"Use geojson-dsl instead.","title":"Helper"},{"location":"ported-functions/#random","text":"randomPosition randomPoint randomLineString randomPolygon","title":"Random"},{"location":"ported-functions/#data","text":"sample","title":"Data"},{"location":"ported-functions/#interpolation","text":"interpolate isobands isolines planepoint tin","title":"Interpolation"},{"location":"ported-functions/#joins","text":"pointsWithinPolygon tag","title":"Joins"},{"location":"ported-functions/#grids","text":"hexGrid pointGrid squareGrid triangleGrid","title":"Grids"},{"location":"ported-functions/#classification","text":"nearestPoint","title":"Classification"},{"location":"ported-functions/#aggregation","text":"collect clustersDbscan clustersKmeans","title":"Aggregation"},{"location":"ported-functions/#meta","text":"coordAll coordEach coordReduce featureEach featureReduce flattenEach flattenReduce getCoord getCoords getGeom getType geomEach geomReduce propEach segmentEach segmentReduce getCluster clusterEach clusterReduce","title":"Meta"},{"location":"ported-functions/#assertations","text":"collectionOf containsNumber geojsonType featureOf","title":"Assertations"},{"location":"ported-functions/#booleans","text":"booleanClockwise booleanContains booleanCrosses booleanDisjoint booleanEqual booleanOverlap booleanParallel booleanPointInPolygon booleanPointOnLine booleanWithin","title":"Booleans"},{"location":"ported-functions/#unit-conversion","text":"bearingToAzimuth convertArea convertLength degreesToRadians lengthToRadians lengthToDegrees radiansToLength radiansToDegrees toMercator toWgs84","title":"Unit Conversion"},{"location":"turf/","text":"Turf Turfjs is a spatial analysis library for JavaScript applications and the turf module contains a Kotlin port of it with support for Kotlin Multiplatform projects, as well as a Java API. This module makes use of the classes defined in the geojson module as the GeoJson inputs to many of the turf functions. The documentation for the ported functions can be found in the API docs , while more details on each function can be found on the Turfjs site. Installation dependencies { implementation \"io.github.dellisd.spatialk:turf:0.1.0\" } Example Turf functions are available as top-level functions in Kotlin, or as static member functions in Java. Kotlin val point = LngLat (- 75.0 , 45.0 ) val ( longitude , latitude ) = destination ( point , 100.0 , 0.0 ) Java Position point = new LngLat ( - 75.0 , 45.0 ); Position result = TurfMeasurement . destination ( point , 100.0 , 0.0 ); Turf Functions A list of all turf functions and their current status in the port can be found on this page . Units of Measurement Units of measurement are represented using the Units enum. These enum values can be passed into functions to specify the units used by other values passed into the function. Kotlin val result = convertLength ( 12.5 , from = Units . Kilometers , to = Units . Miles ) Java double result = TurfUtils . convertLength ( 12.5 , Units . Kilometers , Units . Miles ); Not all units are valid for every function. For example: acres cannot be used as a measure of distance. Calling a function like convertLength with Units.Acres as one of the arguments will cause an IllegalArgumentException .","title":"Overview"},{"location":"turf/#turf","text":"Turfjs is a spatial analysis library for JavaScript applications and the turf module contains a Kotlin port of it with support for Kotlin Multiplatform projects, as well as a Java API. This module makes use of the classes defined in the geojson module as the GeoJson inputs to many of the turf functions. The documentation for the ported functions can be found in the API docs , while more details on each function can be found on the Turfjs site.","title":"Turf"},{"location":"turf/#installation","text":"dependencies { implementation \"io.github.dellisd.spatialk:turf:0.1.0\" }","title":"Installation"},{"location":"turf/#example","text":"Turf functions are available as top-level functions in Kotlin, or as static member functions in Java. Kotlin val point = LngLat (- 75.0 , 45.0 ) val ( longitude , latitude ) = destination ( point , 100.0 , 0.0 ) Java Position point = new LngLat ( - 75.0 , 45.0 ); Position result = TurfMeasurement . destination ( point , 100.0 , 0.0 );","title":"Example"},{"location":"turf/#turf-functions","text":"A list of all turf functions and their current status in the port can be found on this page .","title":"Turf Functions"},{"location":"turf/#units-of-measurement","text":"Units of measurement are represented using the Units enum. These enum values can be passed into functions to specify the units used by other values passed into the function. Kotlin val result = convertLength ( 12.5 , from = Units . Kilometers , to = Units . Miles ) Java double result = TurfUtils . convertLength ( 12.5 , Units . Kilometers , Units . Miles ); Not all units are valid for every function. For example: acres cannot be used as a measure of distance. Calling a function like convertLength with Units.Acres as one of the arguments will cause an IllegalArgumentException .","title":"Units of Measurement"},{"location":"api/geojson/","text":"geojson Packages Name Summary (common, jvm, native) io.github.dellisd.spatialk.geojson (common, jvm, native) io.github.dellisd.spatialk.geojson.serialization Index All Types","title":"geojson"},{"location":"api/geojson/#packages","text":"Name Summary (common, jvm, native) io.github.dellisd.spatialk.geojson (common, jvm, native) io.github.dellisd.spatialk.geojson.serialization","title":"Packages"},{"location":"api/geojson/#index","text":"All Types","title":"Index"},{"location":"api/geojson/alltypes/","text":"All Types Name Summary (common, jvm, native) io.github.dellisd.spatialk.geojson.BoundingBox Represents an area bounded by a northeast and southwest . |(common, jvm, native) io.github.dellisd.spatialk.geojson.serialization.BoundingBoxSerializer |(common, jvm, native) io.github.dellisd.spatialk.geojson.Feature A feature object represents a spatially bounded thing. |(common, jvm, native) io.github.dellisd.spatialk.geojson.FeatureCollection A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. |(common, jvm, native) io.github.dellisd.spatialk.geojson.serialization.FeatureCollectionSerializer |(common, jvm, native) io.github.dellisd.spatialk.geojson.serialization.FeatureSerializer |(common, jvm, native) io.github.dellisd.spatialk.geojson.GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features . |(common, jvm, native) io.github.dellisd.spatialk.geojson.Geometry |(common, jvm, native) io.github.dellisd.spatialk.geojson.GeometryCollection |(common, jvm, native) io.github.dellisd.spatialk.geojson.serialization.GeometrySerializer |(common, jvm, native) io.github.dellisd.spatialk.geojson.LineString |(common, jvm, native) io.github.dellisd.spatialk.geojson.LngLat |(common, jvm, native) io.github.dellisd.spatialk.geojson.MultiLineString |(common, jvm, native) io.github.dellisd.spatialk.geojson.MultiPoint |(common, jvm, native) io.github.dellisd.spatialk.geojson.MultiPolygon |(common, jvm, native) io.github.dellisd.spatialk.geojson.Point |(common, jvm, native) io.github.dellisd.spatialk.geojson.Polygon |(common, jvm, native) io.github.dellisd.spatialk.geojson.Position A position is the fundamental geometry construct. |(common, jvm, native) io.github.dellisd.spatialk.geojson.serialization.PositionSerializer KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] . |(common, jvm, native) (extensions in package io.github.dellisd.spatialk.geojson) kotlin.String","title":"Index"},{"location":"api/geojson/alltypes/#all-types","text":"Name Summary (common, jvm, native)","title":"All Types"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonboundingbox","text":"Represents an area bounded by a northeast and southwest . |(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.BoundingBox"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonserializationboundingboxserializer","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.serialization.BoundingBoxSerializer"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonfeature","text":"A feature object represents a spatially bounded thing. |(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.Feature"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonfeaturecollection","text":"A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. |(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.FeatureCollection"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonserializationfeaturecollectionserializer","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.serialization.FeatureCollectionSerializer"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonserializationfeatureserializer","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.serialization.FeatureSerializer"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsongeojson","text":"A GeoJSON object represents a Geometry , Feature , or collection of Features . |(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.GeoJson"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsongeometry","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.Geometry"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsongeometrycollection","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.GeometryCollection"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonserializationgeometryserializer","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.serialization.GeometrySerializer"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonlinestring","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.LineString"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonlnglat","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.LngLat"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonmultilinestring","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.MultiLineString"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonmultipoint","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.MultiPoint"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonmultipolygon","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.MultiPolygon"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonpoint","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.Point"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonpolygon","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.Polygon"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonposition","text":"A position is the fundamental geometry construct. |(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.Position"},{"location":"api/geojson/alltypes/#iogithubdellisdspatialkgeojsonserializationpositionserializer","text":"KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] . |(common, jvm, native) (extensions in package io.github.dellisd.spatialk.geojson)","title":"io.github.dellisd.spatialk.geojson.serialization.PositionSerializer"},{"location":"api/geojson/alltypes/#kotlinstring","text":"","title":"kotlin.String"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/","text":"geojson / io.github.dellisd.spatialk.geojson Package io.github.dellisd.spatialk.geojson Types Name Summary (common, jvm, native) BoundingBox Represents an area bounded by a northeast and southwest . data class BoundingBox (common, jvm, native) Feature A feature object represents a spatially bounded thing. class Feature : GeoJson (common, jvm, native) FeatureCollection A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. data class FeatureCollection : Collection < Feature >, GeoJson (common, jvm, native) GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features . interface GeoJson (common, jvm, native) Geometry sealed class Geometry : GeoJson (common, jvm, native) GeometryCollection data class GeometryCollection : Geometry , Collection < Geometry > (common, jvm, native) LineString data class LineString : Geometry (common, jvm, native) LngLat data class LngLat : Position (common, jvm, native) MultiLineString data class MultiLineString : Geometry (common, jvm, native) MultiPoint data class MultiPoint : Geometry (common, jvm, native) MultiPolygon data class MultiPolygon : Geometry (common, jvm, native) Point class Point : Geometry , Position (common, jvm, native) Polygon data class Polygon : Geometry (common, jvm, native) Position A position is the fundamental geometry construct. interface Position Extensions for External Classes Name Summary (common, jvm, native) kotlin.String","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/#package-iogithubdellisdspatialkgeojson","text":"","title":"Package io.github.dellisd.spatialk.geojson"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/#types","text":"Name Summary (common, jvm, native) BoundingBox Represents an area bounded by a northeast and southwest . data class BoundingBox (common, jvm, native) Feature A feature object represents a spatially bounded thing. class Feature : GeoJson (common, jvm, native) FeatureCollection A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. data class FeatureCollection : Collection < Feature >, GeoJson (common, jvm, native) GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features . interface GeoJson (common, jvm, native) Geometry sealed class Geometry : GeoJson (common, jvm, native) GeometryCollection data class GeometryCollection : Geometry , Collection < Geometry > (common, jvm, native) LineString data class LineString : Geometry (common, jvm, native) LngLat data class LngLat : Position (common, jvm, native) MultiLineString data class MultiLineString : Geometry (common, jvm, native) MultiPoint data class MultiPoint : Geometry (common, jvm, native) MultiPolygon data class MultiPolygon : Geometry (common, jvm, native) Point class Point : Geometry , Position (common, jvm, native) Polygon data class Polygon : Geometry (common, jvm, native) Position A position is the fundamental geometry construct. interface Position","title":"Types"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/#extensions-for-external-classes","text":"Name Summary (common, jvm, native) kotlin.String","title":"Extensions for External Classes"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/","text":"geojson / io.github.dellisd.spatialk.geojson / BoundingBox BoundingBox (common, jvm, native) data class BoundingBox Represents an area bounded by a northeast and southwest . A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. When serialized, a BoundingBox is represented as an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the northeasterly point. The axes order of a BoundingBox follow the axes order of geometries. For the BoundingBox to be serialized in 3D form, both Positions must have a defined altitude. Constructors Name Summary (common, jvm, native) <init> <init>(west: Double , south: Double , east: Double , north: Double ) <init>(coordinates: DoubleArray ) <init>(coordinates: List < Double >) <init>(west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) Represents an area bounded by a northeast and southwest . <init>(southwest: Position , northeast: Position ) Properties Name Summary (common, jvm, native) northeast The northeastern corner of the BoundingBox val northeast: Position (common, jvm, native) southwest The southwestern corner of the BoundingBox val southwest: Position","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#boundingbox","text":"(common, jvm, native) data class BoundingBox Represents an area bounded by a northeast and southwest . A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. When serialized, a BoundingBox is represented as an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the northeasterly point. The axes order of a BoundingBox follow the axes order of geometries. For the BoundingBox to be serialized in 3D form, both Positions must have a defined altitude.","title":"BoundingBox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(west: Double , south: Double , east: Double , north: Double ) <init>(coordinates: DoubleArray ) <init>(coordinates: List < Double >) <init>(west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) Represents an area bounded by a northeast and southwest . <init>(southwest: Position , northeast: Position )","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/#properties","text":"Name Summary (common, jvm, native) northeast The northeastern corner of the BoundingBox val northeast: Position (common, jvm, native) southwest The southwestern corner of the BoundingBox val southwest: Position","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / BoundingBox / <init> <init> (common, jvm, native) <init>(west: Double , south: Double , east: Double , north: Double ) <init>(coordinates: DoubleArray ) <init>(coordinates: List < Double >) <init>(west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) (common, jvm, native) <init>(southwest: Position , northeast: Position ) Represents an area bounded by a northeast and southwest . A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. When serialized, a BoundingBox is represented as an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the northeasterly point. The axes order of a BoundingBox follow the axes order of geometries. For the BoundingBox to be serialized in 3D form, both Positions must have a defined altitude.","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/-init-/#init","text":"(common, jvm, native) <init>(west: Double , south: Double , east: Double , north: Double ) <init>(coordinates: DoubleArray ) <init>(coordinates: List < Double >) <init>(west: Double , south: Double , minAltitude: Double , east: Double , north: Double , maxAltitude: Double ) (common, jvm, native) <init>(southwest: Position , northeast: Position ) Represents an area bounded by a northeast and southwest . A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. When serialized, a BoundingBox is represented as an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the northeasterly point. The axes order of a BoundingBox follow the axes order of geometries. For the BoundingBox to be serialized in 3D form, both Positions must have a defined altitude.","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/northeast/","text":"geojson / io.github.dellisd.spatialk.geojson / BoundingBox / northeast northeast (common, jvm, native) val northeast: Position The northeastern corner of the BoundingBox Property northeast - The northeastern corner of the BoundingBox","title":"Northeast"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/northeast/#northeast","text":"(common, jvm, native) val northeast: Position The northeastern corner of the BoundingBox","title":"northeast"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/northeast/#property","text":"northeast - The northeastern corner of the BoundingBox","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/southwest/","text":"geojson / io.github.dellisd.spatialk.geojson / BoundingBox / southwest southwest (common, jvm, native) val southwest: Position The southwestern corner of the BoundingBox Property southwest - The southwestern corner of the BoundingBox","title":"Southwest"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/southwest/#southwest","text":"(common, jvm, native) val southwest: Position The southwestern corner of the BoundingBox","title":"southwest"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-bounding-box/southwest/#property","text":"southwest - The southwestern corner of the BoundingBox","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature Feature (common, jvm, native) class Feature : GeoJson A feature object represents a spatially bounded thing. Constructors Name Summary <init> A feature object represents a spatially bounded thing.(native) Feature(geometry: Geometry ?, properties: Map < String , <ERROR CLASS>> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) (common, jvm) <init>(geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) geometry A Geometry object contained within the feature. val geometry: Geometry ? (common, jvm, native) id An optionally included string that commonly identifies this feature. val id: String ? (common, jvm, native) json Gets a JSON representation of this object. val json: String properties Additional properties about this feature. When serialized, any non-simple types will be serialized into JSON objects.(common, jvm) val properties: Map < String , JsonElement> (native) val properties: Map < String , <ERROR CLASS>> Functions Name Summary (common, jvm, native) component1 operator fun component1(): Geometry ? component2 (common, jvm) operator fun component2(): Map < String , JsonElement> (native) operator fun component2(): Map < String , <ERROR CLASS>> (common, jvm, native) component3 operator fun component3(): String ? (common, jvm, native) component4 operator fun component4(): BoundingBox ? (common, jvm, native) equals fun equals(other: Any ?): Boolean (common, jvm, native) getBooleanProperty fun getBooleanProperty(key: String ): Boolean ? getJsonProperty (common, jvm) fun getJsonProperty(key: String ): JsonElement? (native) fun getJsonProperty(key: String ): <ERROR CLASS>? (common, jvm, native) getNumberProperty fun getNumberProperty(key: String ): Number ? (common, jvm, native) getProperty Gets the value of the property with the given key . fun <T> getProperty(key: String ): T? (common, jvm, native) getStringProperty fun getStringProperty(key: String ): String ? (common, jvm, native) hashCode fun hashCode(): Int (common, jvm, native) removeProperty fun removeProperty(key: String ): Any ? (common, jvm, native) setBooleanProperty fun setBooleanProperty(key: String , value: Boolean ?): Unit setJsonProperty (native) fun setJsonProperty(key: String , value: <ERROR CLASS>): Unit (common, jvm) fun setJsonProperty(key: String , value: JsonElement): Unit (common, jvm, native) setNumberProperty fun setNumberProperty(key: String , value: Number ?): Unit (common, jvm, native) setStringProperty fun setStringProperty(key: String , value: String ?): Unit (common, jvm, native) toString fun toString(): String Companion Object Functions Name Summary serializer (common, jvm) fun serializer(): KSerializer< Feature > (native) fun serializer(): <ERROR CLASS>< Feature > (common, jvm, native) toFeature fun String .toFeature(): Feature","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/#feature","text":"(common, jvm, native) class Feature : GeoJson A feature object represents a spatially bounded thing.","title":"Feature"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/#constructors","text":"Name Summary <init> A feature object represents a spatially bounded thing.(native) Feature(geometry: Geometry ?, properties: Map < String , <ERROR CLASS>> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) (common, jvm) <init>(geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) geometry A Geometry object contained within the feature. val geometry: Geometry ? (common, jvm, native) id An optionally included string that commonly identifies this feature. val id: String ? (common, jvm, native) json Gets a JSON representation of this object. val json: String properties Additional properties about this feature. When serialized, any non-simple types will be serialized into JSON objects.(common, jvm) val properties: Map < String , JsonElement> (native) val properties: Map < String , <ERROR CLASS>>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/#functions","text":"Name Summary (common, jvm, native) component1 operator fun component1(): Geometry ? component2 (common, jvm) operator fun component2(): Map < String , JsonElement> (native) operator fun component2(): Map < String , <ERROR CLASS>> (common, jvm, native) component3 operator fun component3(): String ? (common, jvm, native) component4 operator fun component4(): BoundingBox ? (common, jvm, native) equals fun equals(other: Any ?): Boolean (common, jvm, native) getBooleanProperty fun getBooleanProperty(key: String ): Boolean ? getJsonProperty (common, jvm) fun getJsonProperty(key: String ): JsonElement? (native) fun getJsonProperty(key: String ): <ERROR CLASS>? (common, jvm, native) getNumberProperty fun getNumberProperty(key: String ): Number ? (common, jvm, native) getProperty Gets the value of the property with the given key . fun <T> getProperty(key: String ): T? (common, jvm, native) getStringProperty fun getStringProperty(key: String ): String ? (common, jvm, native) hashCode fun hashCode(): Int (common, jvm, native) removeProperty fun removeProperty(key: String ): Any ? (common, jvm, native) setBooleanProperty fun setBooleanProperty(key: String , value: Boolean ?): Unit setJsonProperty (native) fun setJsonProperty(key: String , value: <ERROR CLASS>): Unit (common, jvm) fun setJsonProperty(key: String , value: JsonElement): Unit (common, jvm, native) setNumberProperty fun setNumberProperty(key: String , value: Number ?): Unit (common, jvm, native) setStringProperty fun setStringProperty(key: String , value: String ?): Unit (common, jvm, native) toString fun toString(): String","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/#companion-object-functions","text":"Name Summary serializer (common, jvm) fun serializer(): KSerializer< Feature > (native) fun serializer(): <ERROR CLASS>< Feature > (common, jvm, native) toFeature fun String .toFeature(): Feature","title":"Companion Object Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / <init> <init> (common, jvm) <init>(geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) A feature object represents a spatially bounded thing. (native) Feature(geometry: Geometry ?, properties: Map < String , <ERROR CLASS>> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) A feature object represents a spatially bounded thing.","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/-init-/#init","text":"(common, jvm) <init>(geometry: Geometry ?, properties: Map < String , JsonElement> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) A feature object represents a spatially bounded thing. (native) Feature(geometry: Geometry ?, properties: Map < String , <ERROR CLASS>> = emptyMap(), id: String ? = null, bbox: BoundingBox ? = null) A feature object represents a spatially bounded thing.","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component1/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / component1 component1 (common, jvm, native) operator fun component1(): Geometry ?","title":"Component1"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component1/#component1","text":"(common, jvm, native) operator fun component1(): Geometry ?","title":"component1"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component2/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / component2 component2 (common, jvm) operator fun component2(): Map < String , JsonElement> (native) operator fun component2(): Map < String , <ERROR CLASS>>","title":"Component2"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component2/#component2","text":"(common, jvm) operator fun component2(): Map < String , JsonElement> (native) operator fun component2(): Map < String , <ERROR CLASS>>","title":"component2"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component3/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / component3 component3 (common, jvm, native) operator fun component3(): String ?","title":"Component3"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component3/#component3","text":"(common, jvm, native) operator fun component3(): String ?","title":"component3"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component4/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / component4 component4 (common, jvm, native) operator fun component4(): BoundingBox ?","title":"Component4"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/component4/#component4","text":"(common, jvm, native) operator fun component4(): BoundingBox ?","title":"component4"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/equals/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / equals equals (common, jvm, native) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/equals/#equals","text":"(common, jvm, native) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/geometry/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / geometry geometry (common, jvm, native) val geometry: Geometry ? A Geometry object contained within the feature. Property geometry - A Geometry object contained within the feature.","title":"Geometry"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/geometry/#geometry","text":"(common, jvm, native) val geometry: Geometry ? A Geometry object contained within the feature.","title":"geometry"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/geometry/#property","text":"geometry - A Geometry object contained within the feature.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-boolean-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / getBooleanProperty getBooleanProperty (common, jvm, native) fun getBooleanProperty(key: String ): Boolean ?","title":"Get boolean property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-boolean-property/#getbooleanproperty","text":"(common, jvm, native) fun getBooleanProperty(key: String ): Boolean ?","title":"getBooleanProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-json-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / getJsonProperty getJsonProperty (common, jvm) fun getJsonProperty(key: String ): JsonElement? (native) fun getJsonProperty(key: String ): <ERROR CLASS>?","title":"Get json property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-json-property/#getjsonproperty","text":"(common, jvm) fun getJsonProperty(key: String ): JsonElement? (native) fun getJsonProperty(key: String ): <ERROR CLASS>?","title":"getJsonProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-number-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / getNumberProperty getNumberProperty (common, jvm, native) fun getNumberProperty(key: String ): Number ?","title":"Get number property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-number-property/#getnumberproperty","text":"(common, jvm, native) fun getNumberProperty(key: String ): Number ?","title":"getNumberProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / getProperty getProperty (common, jvm) @JvmName(\"getPropertyCast\") fun <reified T> getProperty(key: String ): T? (native) fun <reified T> getProperty(key: String ): T? Gets the value of the property with the given key . Parameters key - The string key for the property Return The value of the property cast to T ?, or null if the key had no value.","title":"Get property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/#getproperty","text":"(common, jvm) @JvmName(\"getPropertyCast\") fun <reified T> getProperty(key: String ): T? (native) fun <reified T> getProperty(key: String ): T? Gets the value of the property with the given key .","title":"getProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-property/#parameters","text":"key - The string key for the property Return The value of the property cast to T ?, or null if the key had no value.","title":"Parameters"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-string-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / getStringProperty getStringProperty (common, jvm, native) fun getStringProperty(key: String ): String ?","title":"Get string property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/get-string-property/#getstringproperty","text":"(common, jvm, native) fun getStringProperty(key: String ): String ?","title":"getStringProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/hash-code/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / hashCode hashCode (common, jvm, native) fun hashCode(): Int","title":"Hash code"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/hash-code/#hashcode","text":"(common, jvm, native) fun hashCode(): Int","title":"hashCode"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/id/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / id id (common, jvm, native) val id: String ? An optionally included string that commonly identifies this feature. Property id - An optionally included string that commonly identifies this feature.","title":"Id"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/id/#id","text":"(common, jvm, native) val id: String ? An optionally included string that commonly identifies this feature.","title":"id"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/id/#property","text":"id - An optionally included string that commonly identifies this feature.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/json/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / json json (common, jvm, native) val json: String Gets a JSON representation of this object. Property json - Gets a JSON representation of this object.","title":"Json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/json/#json","text":"(common, jvm, native) val json: String Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/json/#property","text":"json - Gets a JSON representation of this object.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/properties/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / properties properties (common, jvm) val properties: Map < String , JsonElement> (native) val properties: Map < String , <ERROR CLASS>> Additional properties about this feature. When serialized, any non-simple types will be serialized into JSON objects. Property properties - Additional properties about this feature. When serialized, any non-simple types will be serialized into JSON objects.","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/properties/#properties","text":"(common, jvm) val properties: Map < String , JsonElement> (native) val properties: Map < String , <ERROR CLASS>> Additional properties about this feature. When serialized, any non-simple types will be serialized into JSON objects.","title":"properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/properties/#property","text":"properties - Additional properties about this feature. When serialized, any non-simple types will be serialized into JSON objects.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/remove-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / removeProperty removeProperty (common, jvm, native) fun removeProperty(key: String ): Any ?","title":"Remove property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/remove-property/#removeproperty","text":"(common, jvm, native) fun removeProperty(key: String ): Any ?","title":"removeProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/serializer/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / serializer serializer (common, jvm) @JvmStatic fun serializer(): KSerializer< Feature > (native) fun serializer(): <ERROR CLASS>< Feature >","title":"Serializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/serializer/#serializer","text":"(common, jvm) @JvmStatic fun serializer(): KSerializer< Feature > (native) fun serializer(): <ERROR CLASS>< Feature >","title":"serializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-boolean-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / setBooleanProperty setBooleanProperty (common, jvm, native) fun setBooleanProperty(key: String , value: Boolean ?): Unit","title":"Set boolean property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-boolean-property/#setbooleanproperty","text":"(common, jvm, native) fun setBooleanProperty(key: String , value: Boolean ?): Unit","title":"setBooleanProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-json-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / setJsonProperty setJsonProperty (common, jvm) fun setJsonProperty(key: String , value: JsonElement): Unit (native) fun setJsonProperty(key: String , value: <ERROR CLASS>): Unit","title":"Set json property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-json-property/#setjsonproperty","text":"(common, jvm) fun setJsonProperty(key: String , value: JsonElement): Unit (native) fun setJsonProperty(key: String , value: <ERROR CLASS>): Unit","title":"setJsonProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-number-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / setNumberProperty setNumberProperty (common, jvm, native) fun setNumberProperty(key: String , value: Number ?): Unit","title":"Set number property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-number-property/#setnumberproperty","text":"(common, jvm, native) fun setNumberProperty(key: String , value: Number ?): Unit","title":"setNumberProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-string-property/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / setStringProperty setStringProperty (common, jvm, native) fun setStringProperty(key: String , value: String ?): Unit","title":"Set string property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/set-string-property/#setstringproperty","text":"(common, jvm, native) fun setStringProperty(key: String , value: String ?): Unit","title":"setStringProperty"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/to-feature/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / toFeature toFeature (common, jvm) @JvmStatic @JvmName(\"fromJson\") fun String .toFeature(): Feature (native) fun String .toFeature(): Feature","title":"To feature"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/to-feature/#tofeature","text":"(common, jvm) @JvmStatic @JvmName(\"fromJson\") fun String .toFeature(): Feature (native) fun String .toFeature(): Feature","title":"toFeature"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/to-string/","text":"geojson / io.github.dellisd.spatialk.geojson / Feature / toString toString (common, jvm, native) fun toString(): String","title":"To string"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature/to-string/#tostring","text":"(common, jvm, native) fun toString(): String","title":"toString"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection FeatureCollection (common, jvm, native) data class FeatureCollection : Collection < Feature >, GeoJson A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. Constructors Name Summary (common, jvm, native) <init> <init>(vararg features: Feature , bbox: BoundingBox ? = null) A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. <init>(features: List < Feature > = emptyList(), bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) features The collection of Feature objects stored in this collection val features: List < Feature > (common, jvm, native) json Gets a JSON representation of this object. val json: String Functions Name Summary (common, jvm, native) equals fun equals(other: Any ?): Boolean (common, jvm, native) hashCode fun hashCode(): Int (common, jvm, native) toString fun toString(): String Companion Object Functions Name Summary serializer (common, jvm) fun serializer(): KSerializer< FeatureCollection > (native) fun serializer(): <ERROR CLASS>< FeatureCollection > toFeatureCollection (common, jvm) fun String .toFeatureCollection(): FeatureCollection (native) fun String .toFeatureCollection(): <ERROR CLASS>","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#featurecollection","text":"(common, jvm, native) data class FeatureCollection : Collection < Feature >, GeoJson A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property.","title":"FeatureCollection"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg features: Feature , bbox: BoundingBox ? = null) A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. <init>(features: List < Feature > = emptyList(), bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) features The collection of Feature objects stored in this collection val features: List < Feature > (common, jvm, native) json Gets a JSON representation of this object. val json: String","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#functions","text":"Name Summary (common, jvm, native) equals fun equals(other: Any ?): Boolean (common, jvm, native) hashCode fun hashCode(): Int (common, jvm, native) toString fun toString(): String","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/#companion-object-functions","text":"Name Summary serializer (common, jvm) fun serializer(): KSerializer< FeatureCollection > (native) fun serializer(): <ERROR CLASS>< FeatureCollection > toFeatureCollection (common, jvm) fun String .toFeatureCollection(): FeatureCollection (native) fun String .toFeatureCollection(): <ERROR CLASS>","title":"Companion Object Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / <init> <init> (common, jvm, native) <init>(vararg features: Feature , bbox: BoundingBox ? = null) (common, jvm, native) <init>(features: List < Feature > = emptyList(), bbox: BoundingBox ? = null) A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property.","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/-init-/#init","text":"(common, jvm, native) <init>(vararg features: Feature , bbox: BoundingBox ? = null) (common, jvm, native) <init>(features: List < Feature > = emptyList(), bbox: BoundingBox ? = null) A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property.","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/equals/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / equals equals (common, jvm, native) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/equals/#equals","text":"(common, jvm, native) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/features/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / features features (common, jvm, native) val features: List < Feature > The collection of Feature objects stored in this collection Property features - The collection of Feature objects stored in this collection","title":"Features"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/features/#features","text":"(common, jvm, native) val features: List < Feature > The collection of Feature objects stored in this collection","title":"features"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/features/#property","text":"features - The collection of Feature objects stored in this collection","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/hash-code/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / hashCode hashCode (common, jvm, native) fun hashCode(): Int","title":"Hash code"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/hash-code/#hashcode","text":"(common, jvm, native) fun hashCode(): Int","title":"hashCode"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/json/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / json json (common, jvm, native) val json: String Gets a JSON representation of this object. Property json - Gets a JSON representation of this object.","title":"Json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/json/#json","text":"(common, jvm, native) val json: String Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/json/#property","text":"json - Gets a JSON representation of this object.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/serializer/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / serializer serializer (common, jvm) @JvmStatic fun serializer(): KSerializer< FeatureCollection > (native) fun serializer(): <ERROR CLASS>< FeatureCollection >","title":"Serializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/serializer/#serializer","text":"(common, jvm) @JvmStatic fun serializer(): KSerializer< FeatureCollection > (native) fun serializer(): <ERROR CLASS>< FeatureCollection >","title":"serializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/to-feature-collection/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / toFeatureCollection toFeatureCollection (common, jvm) @JvmStatic @JvmName(\"fromJson\") fun String .toFeatureCollection(): FeatureCollection (native) fun String .toFeatureCollection(): <ERROR CLASS>","title":"To feature collection"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/to-feature-collection/#tofeaturecollection","text":"(common, jvm) @JvmStatic @JvmName(\"fromJson\") fun String .toFeatureCollection(): FeatureCollection (native) fun String .toFeatureCollection(): <ERROR CLASS>","title":"toFeatureCollection"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/to-string/","text":"geojson / io.github.dellisd.spatialk.geojson / FeatureCollection / toString toString (common, jvm, native) fun toString(): String","title":"To string"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-feature-collection/to-string/#tostring","text":"(common, jvm, native) fun toString(): String","title":"toString"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/","text":"geojson / io.github.dellisd.spatialk.geojson / GeoJson GeoJson (common, jvm, native) interface GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features . Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. abstract val bbox: BoundingBox ? (common, jvm, native) json Gets a JSON representation of this object. abstract val json: String Inheritors Name Summary (common, jvm, native) Feature A feature object represents a spatially bounded thing. class Feature : GeoJson (common, jvm, native) FeatureCollection A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. data class FeatureCollection : Collection < Feature >, GeoJson (common, jvm, native) Geometry sealed class Geometry : GeoJson","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#geojson","text":"(common, jvm, native) interface GeoJson A GeoJSON object represents a Geometry , Feature , or collection of Features .","title":"GeoJson"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. abstract val bbox: BoundingBox ? (common, jvm, native) json Gets a JSON representation of this object. abstract val json: String","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/#inheritors","text":"Name Summary (common, jvm, native) Feature A feature object represents a spatially bounded thing. class Feature : GeoJson (common, jvm, native) FeatureCollection A FeatureCollection object is a collection of Feature objects. This class implements the Collection interface and can be used as a Collection directly. The list of features contained in this collection are also accessible through the features property. data class FeatureCollection : Collection < Feature >, GeoJson (common, jvm, native) Geometry sealed class Geometry : GeoJson","title":"Inheritors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / GeoJson / bbox bbox (common, jvm, native) abstract val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/bbox/#bbox","text":"(common, jvm, native) abstract val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/","text":"geojson / io.github.dellisd.spatialk.geojson / GeoJson / json json (common, jvm, native) abstract val json: String Gets a JSON representation of this object. Property json - Gets a JSON representation of this object. Getter Property json - Gets a JSON representation of this object. Getter Gets a JSON representation of this object.","title":"Json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/#json","text":"(common, jvm, native) abstract val json: String Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/#property","text":"json - Gets a JSON representation of this object.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geo-json/json/#getter-property","text":"json - Gets a JSON representation of this object. Getter Gets a JSON representation of this object.","title":"Getter Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/","text":"geojson / io.github.dellisd.spatialk.geojson / Geometry Geometry (common, jvm, native) sealed class Geometry : GeoJson Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. abstract val bbox: BoundingBox ? (common, jvm, native) json Gets a JSON representation of this object. open val json: String Functions Name Summary (common, jvm, native) toString open fun toString(): String Inheritors Name Summary (common, jvm, native) GeometryCollection data class GeometryCollection : Geometry , Collection < Geometry > (common, jvm, native) LineString data class LineString : Geometry (common, jvm, native) MultiLineString data class MultiLineString : Geometry (common, jvm, native) MultiPoint data class MultiPoint : Geometry (common, jvm, native) MultiPolygon data class MultiPolygon : Geometry (common, jvm, native) Point class Point : Geometry , Position (common, jvm, native) Polygon data class Polygon : Geometry","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/#geometry","text":"(common, jvm, native) sealed class Geometry : GeoJson","title":"Geometry"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. abstract val bbox: BoundingBox ? (common, jvm, native) json Gets a JSON representation of this object. open val json: String","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/#functions","text":"Name Summary (common, jvm, native) toString open fun toString(): String","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/#inheritors","text":"Name Summary (common, jvm, native) GeometryCollection data class GeometryCollection : Geometry , Collection < Geometry > (common, jvm, native) LineString data class LineString : Geometry (common, jvm, native) MultiLineString data class MultiLineString : Geometry (common, jvm, native) MultiPoint data class MultiPoint : Geometry (common, jvm, native) MultiPolygon data class MultiPolygon : Geometry (common, jvm, native) Point class Point : Geometry , Position (common, jvm, native) Polygon data class Polygon : Geometry","title":"Inheritors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / Geometry / bbox bbox (common, jvm, native) abstract val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/bbox/#bbox","text":"(common, jvm, native) abstract val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/json/","text":"geojson / io.github.dellisd.spatialk.geojson / Geometry / json json (common, jvm, native) open val json: String Gets a JSON representation of this object. Property json - Gets a JSON representation of this object.","title":"Json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/json/#json","text":"(common, jvm, native) open val json: String Gets a JSON representation of this object.","title":"json"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/json/#property","text":"json - Gets a JSON representation of this object.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/to-string/","text":"geojson / io.github.dellisd.spatialk.geojson / Geometry / toString toString (common, jvm, native) open fun toString(): String","title":"To string"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry/to-string/#tostring","text":"(common, jvm, native) open fun toString(): String","title":"toString"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/","text":"geojson / io.github.dellisd.spatialk.geojson / GeometryCollection GeometryCollection (common, jvm, native) data class GeometryCollection : Geometry , Collection < Geometry > Constructors Name Summary (common, jvm, native) <init> <init>(vararg geometries: Geometry , bbox: BoundingBox ? = null) <init>(geometries: List < Geometry >, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) geometries val geometries: List < Geometry >","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#geometrycollection","text":"(common, jvm, native) data class GeometryCollection : Geometry , Collection < Geometry >","title":"GeometryCollection"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg geometries: Geometry , bbox: BoundingBox ? = null) <init>(geometries: List < Geometry >, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) geometries val geometries: List < Geometry >","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / <init> <init> (common, jvm, native) <init>(vararg geometries: Geometry , bbox: BoundingBox ? = null) <init>(geometries: List < Geometry >, bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/-init-/#init","text":"(common, jvm, native) <init>(vararg geometries: Geometry , bbox: BoundingBox ? = null) <init>(geometries: List < Geometry >, bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/geometries/","text":"geojson / io.github.dellisd.spatialk.geojson / GeometryCollection / geometries geometries (common, jvm, native) val geometries: List < Geometry >","title":"Geometries"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-geometry-collection/geometries/#geometries","text":"(common, jvm, native) val geometries: List < Geometry >","title":"geometries"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/","text":"geojson / io.github.dellisd.spatialk.geojson / LineString LineString (common, jvm, native) data class LineString : Geometry Constructors Name Summary (common, jvm, native) <init> <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < Position >","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/#linestring","text":"(common, jvm, native) data class LineString : Geometry","title":"LineString"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < Position >","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / LineString / <init> <init> (common, jvm, native) <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/-init-/#init","text":"(common, jvm, native) <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / LineString / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/coordinates/","text":"geojson / io.github.dellisd.spatialk.geojson / LineString / coordinates coordinates (common, jvm, native) val coordinates: List < Position >","title":"Coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-line-string/coordinates/#coordinates","text":"(common, jvm, native) val coordinates: List < Position >","title":"coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/","text":"geojson / io.github.dellisd.spatialk.geojson / LngLat LngLat (common, jvm, native) data class LngLat : Position Constructors Name Summary (common, jvm, native) <init> <init>(longitude: Double , latitude: Double , altitude: Double ? = null) Properties Name Summary (common, jvm, native) altitude Optionally, an altitude or elevation for this position val altitude: Double ? (common, jvm, native) latitude The latitude value of this position (or northing value for projected coordinates) val latitude: Double (common, jvm, native) longitude The longitude value of this position (or easting value for projected coordinates) val longitude: Double","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/#lnglat","text":"(common, jvm, native) data class LngLat : Position","title":"LngLat"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(longitude: Double , latitude: Double , altitude: Double ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/#properties","text":"Name Summary (common, jvm, native) altitude Optionally, an altitude or elevation for this position val altitude: Double ? (common, jvm, native) latitude The latitude value of this position (or northing value for projected coordinates) val latitude: Double (common, jvm, native) longitude The longitude value of this position (or easting value for projected coordinates) val longitude: Double","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / LngLat / <init> <init> (common, jvm, native) <init>(longitude: Double , latitude: Double , altitude: Double ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/-init-/#init","text":"(common, jvm, native) <init>(longitude: Double , latitude: Double , altitude: Double ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/altitude/","text":"geojson / io.github.dellisd.spatialk.geojson / LngLat / altitude altitude (common, jvm, native) val altitude: Double ? Optionally, an altitude or elevation for this position Property altitude - Optionally, an altitude or elevation for this position","title":"Altitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/altitude/#altitude","text":"(common, jvm, native) val altitude: Double ? Optionally, an altitude or elevation for this position","title":"altitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/altitude/#property","text":"altitude - Optionally, an altitude or elevation for this position","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/latitude/","text":"geojson / io.github.dellisd.spatialk.geojson / LngLat / latitude latitude (common, jvm, native) val latitude: Double The latitude value of this position (or northing value for projected coordinates) Property latitude - The latitude value of this position (or northing value for projected coordinates)","title":"Latitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/latitude/#latitude","text":"(common, jvm, native) val latitude: Double The latitude value of this position (or northing value for projected coordinates)","title":"latitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/latitude/#property","text":"latitude - The latitude value of this position (or northing value for projected coordinates)","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/longitude/","text":"geojson / io.github.dellisd.spatialk.geojson / LngLat / longitude longitude (common, jvm, native) val longitude: Double The longitude value of this position (or easting value for projected coordinates) Property longitude - The longitude value of this position (or easting value for projected coordinates)","title":"Longitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/longitude/#longitude","text":"(common, jvm, native) val longitude: Double The longitude value of this position (or easting value for projected coordinates)","title":"longitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-lng-lat/longitude/#property","text":"longitude - The longitude value of this position (or easting value for projected coordinates)","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiLineString MultiLineString (common, jvm, native) data class MultiLineString : Geometry Constructors Name Summary (common, jvm, native) <init> <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < List < Position >>","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#multilinestring","text":"(common, jvm, native) data class MultiLineString : Geometry","title":"MultiLineString"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < List < Position >>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiLineString / <init> <init> (common, jvm, native) <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/-init-/#init","text":"(common, jvm, native) <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiLineString / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/coordinates/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiLineString / coordinates coordinates (common, jvm, native) val coordinates: List < List < Position >>","title":"Coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-line-string/coordinates/#coordinates","text":"(common, jvm, native) val coordinates: List < List < Position >>","title":"coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPoint MultiPoint (common, jvm, native) data class MultiPoint : Geometry Constructors Name Summary (common, jvm, native) <init> <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < Position >","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#multipoint","text":"(common, jvm, native) data class MultiPoint : Geometry","title":"MultiPoint"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < Position >","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPoint / <init> <init> (common, jvm, native) <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/-init-/#init","text":"(common, jvm, native) <init>(vararg coordinates: Position , bbox: BoundingBox ? = null) <init>(coordinates: Array < DoubleArray >, bbox: BoundingBox ? = null) <init>(coordinates: List < Position >, bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPoint / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/coordinates/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPoint / coordinates coordinates (common, jvm, native) val coordinates: List < Position >","title":"Coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-point/coordinates/#coordinates","text":"(common, jvm, native) val coordinates: List < Position >","title":"coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPolygon MultiPolygon (common, jvm, native) data class MultiPolygon : Geometry Constructors Name Summary (common, jvm, native) <init> <init>(vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < List < Position >>>, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < List < List < Position >>>","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#multipolygon","text":"(common, jvm, native) data class MultiPolygon : Geometry","title":"MultiPolygon"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < List < Position >>>, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < List < List < Position >>>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / <init> <init> (common, jvm, native) <init>(vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < List < Position >>>, bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/-init-/#init","text":"(common, jvm, native) <init>(vararg coordinates: List < List < Position >>, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < Array < DoubleArray >>>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < List < Position >>>, bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/coordinates/","text":"geojson / io.github.dellisd.spatialk.geojson / MultiPolygon / coordinates coordinates (common, jvm, native) val coordinates: List < List < List < Position >>>","title":"Coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-multi-polygon/coordinates/#coordinates","text":"(common, jvm, native) val coordinates: List < List < List < Position >>>","title":"coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/","text":"geojson / io.github.dellisd.spatialk.geojson / Point Point (common, jvm, native) class Point : Geometry , Position Constructors Name Summary (common, jvm, native) <init> <init>(coordinates: DoubleArray , bbox: BoundingBox ? = null) <init>(coordinates: Position , bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: Position Functions Name Summary (common, jvm, native) component4 operator fun component4(): BoundingBox ? (common, jvm, native) equals fun equals(other: Any ?): Boolean (common, jvm, native) hashCode fun hashCode(): Int","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/#point","text":"(common, jvm, native) class Point : Geometry , Position","title":"Point"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(coordinates: DoubleArray , bbox: BoundingBox ? = null) <init>(coordinates: Position , bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: Position","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/#functions","text":"Name Summary (common, jvm, native) component4 operator fun component4(): BoundingBox ? (common, jvm, native) equals fun equals(other: Any ?): Boolean (common, jvm, native) hashCode fun hashCode(): Int","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / Point / <init> <init> (common, jvm, native) <init>(coordinates: DoubleArray , bbox: BoundingBox ? = null) <init>(coordinates: Position , bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/-init-/#init","text":"(common, jvm, native) <init>(coordinates: DoubleArray , bbox: BoundingBox ? = null) <init>(coordinates: Position , bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / Point / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/component4/","text":"geojson / io.github.dellisd.spatialk.geojson / Point / component4 component4 (common, jvm, native) operator fun component4(): BoundingBox ?","title":"Component4"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/component4/#component4","text":"(common, jvm, native) operator fun component4(): BoundingBox ?","title":"component4"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/coordinates/","text":"geojson / io.github.dellisd.spatialk.geojson / Point / coordinates coordinates (common, jvm, native) val coordinates: Position","title":"Coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/coordinates/#coordinates","text":"(common, jvm, native) val coordinates: Position","title":"coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/equals/","text":"geojson / io.github.dellisd.spatialk.geojson / Point / equals equals (common, jvm, native) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/equals/#equals","text":"(common, jvm, native) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/hash-code/","text":"geojson / io.github.dellisd.spatialk.geojson / Point / hashCode hashCode (common, jvm, native) fun hashCode(): Int","title":"Hash code"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-point/hash-code/#hashcode","text":"(common, jvm, native) fun hashCode(): Int","title":"hashCode"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/","text":"geojson / io.github.dellisd.spatialk.geojson / Polygon Polygon (common, jvm, native) data class Polygon : Geometry Constructors Name Summary (common, jvm, native) <init> <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null) Properties Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < List < Position >>","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/#polygon","text":"(common, jvm, native) data class Polygon : Geometry","title":"Polygon"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/#constructors","text":"Name Summary (common, jvm, native) <init> <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":"Constructors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/#properties","text":"Name Summary (common, jvm, native) bbox An optional bounding box used to represent the limits of the object's geometry. val bbox: BoundingBox ? (common, jvm, native) coordinates val coordinates: List < List < Position >>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/-init-/","text":"geojson / io.github.dellisd.spatialk.geojson / Polygon / <init> <init> (common, jvm, native) <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":" init "},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/-init-/#init","text":"(common, jvm, native) <init>(vararg coordinates: List < Position >, bbox: BoundingBox ? = null) <init>(coordinates: Array < Array < DoubleArray >>, bbox: BoundingBox ? = null) <init>(coordinates: List < List < Position >>, bbox: BoundingBox ? = null)","title":"&lt;init&gt;"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/bbox/","text":"geojson / io.github.dellisd.spatialk.geojson / Polygon / bbox bbox (common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry. Property bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/bbox/#bbox","text":"(common, jvm, native) val bbox: BoundingBox ? An optional bounding box used to represent the limits of the object's geometry.","title":"bbox"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/bbox/#property","text":"bbox - An optional bounding box used to represent the limits of the object's geometry.","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/coordinates/","text":"geojson / io.github.dellisd.spatialk.geojson / Polygon / coordinates coordinates (common, jvm, native) val coordinates: List < List < Position >>","title":"Coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-polygon/coordinates/#coordinates","text":"(common, jvm, native) val coordinates: List < List < Position >>","title":"coordinates"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/","text":"geojson / io.github.dellisd.spatialk.geojson / Position Position (common, jvm, native) interface Position A position is the fundamental geometry construct. In JSON, a position is an array of numbers. There MUST be two or more elements. The first two elements are longitude , or easting and northing, precisely in that order using decimal numbers. Altitude or elevation MAY be included as an optional third element. When serialized, the latitude , and altitude (if present) will be represented as an array. LngLat ( longitude = - 75.0 , latitude = 45.0 ) will be serialized as [ -75.0 , 45.0 ] See Also PositionSerializer Properties Name Summary (common, jvm, native) altitude Optionally, an altitude or elevation for this position abstract val altitude: Double ? (common, jvm, native) latitude The latitude value of this position (or northing value for projected coordinates) abstract val latitude: Double (common, jvm, native) longitude The longitude value of this position (or easting value for projected coordinates) abstract val longitude: Double Functions Name Summary (common, jvm, native) component1 Component function for getting the longitude abstract operator fun component1(): Double (common, jvm, native) component2 Component function for getting the latitude abstract operator fun component2(): Double (common, jvm, native) component3 Component function for getting the altitude abstract operator fun component3(): Double ? Inheritors Name Summary (common, jvm, native) LngLat data class LngLat : Position (common, jvm, native) Point class Point : Geometry , Position","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/#position","text":"(common, jvm, native) interface Position A position is the fundamental geometry construct. In JSON, a position is an array of numbers. There MUST be two or more elements. The first two elements are longitude , or easting and northing, precisely in that order using decimal numbers. Altitude or elevation MAY be included as an optional third element. When serialized, the latitude , and altitude (if present) will be represented as an array. LngLat ( longitude = - 75.0 , latitude = 45.0 ) will be serialized as [ -75.0 , 45.0 ] See Also PositionSerializer","title":"Position"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/#properties","text":"Name Summary (common, jvm, native) altitude Optionally, an altitude or elevation for this position abstract val altitude: Double ? (common, jvm, native) latitude The latitude value of this position (or northing value for projected coordinates) abstract val latitude: Double (common, jvm, native) longitude The longitude value of this position (or easting value for projected coordinates) abstract val longitude: Double","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/#functions","text":"Name Summary (common, jvm, native) component1 Component function for getting the longitude abstract operator fun component1(): Double (common, jvm, native) component2 Component function for getting the latitude abstract operator fun component2(): Double (common, jvm, native) component3 Component function for getting the altitude abstract operator fun component3(): Double ?","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/#inheritors","text":"Name Summary (common, jvm, native) LngLat data class LngLat : Position (common, jvm, native) Point class Point : Geometry , Position","title":"Inheritors"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/altitude/","text":"geojson / io.github.dellisd.spatialk.geojson / Position / altitude altitude (common, jvm, native) abstract val altitude: Double ? Optionally, an altitude or elevation for this position Property altitude - Optionally, an altitude or elevation for this position","title":"Altitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/altitude/#altitude","text":"(common, jvm, native) abstract val altitude: Double ? Optionally, an altitude or elevation for this position","title":"altitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/altitude/#property","text":"altitude - Optionally, an altitude or elevation for this position","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/component1/","text":"geojson / io.github.dellisd.spatialk.geojson / Position / component1 component1 (common, jvm, native) abstract operator fun component1(): Double Component function for getting the longitude Return longitude","title":"Component1"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/component1/#component1","text":"(common, jvm, native) abstract operator fun component1(): Double Component function for getting the longitude Return longitude","title":"component1"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/component2/","text":"geojson / io.github.dellisd.spatialk.geojson / Position / component2 component2 (common, jvm, native) abstract operator fun component2(): Double Component function for getting the latitude Return latitude","title":"Component2"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/component2/#component2","text":"(common, jvm, native) abstract operator fun component2(): Double Component function for getting the latitude Return latitude","title":"component2"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/component3/","text":"geojson / io.github.dellisd.spatialk.geojson / Position / component3 component3 (common, jvm, native) abstract operator fun component3(): Double ? Component function for getting the altitude Return altitude","title":"Component3"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/component3/#component3","text":"(common, jvm, native) abstract operator fun component3(): Double ? Component function for getting the altitude Return altitude","title":"component3"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/latitude/","text":"geojson / io.github.dellisd.spatialk.geojson / Position / latitude latitude (common, jvm, native) abstract val latitude: Double The latitude value of this position (or northing value for projected coordinates) Property latitude - The latitude value of this position (or northing value for projected coordinates)","title":"Latitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/latitude/#latitude","text":"(common, jvm, native) abstract val latitude: Double The latitude value of this position (or northing value for projected coordinates)","title":"latitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/latitude/#property","text":"latitude - The latitude value of this position (or northing value for projected coordinates)","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/longitude/","text":"geojson / io.github.dellisd.spatialk.geojson / Position / longitude longitude (common, jvm, native) abstract val longitude: Double The longitude value of this position (or easting value for projected coordinates) Property longitude - The longitude value of this position (or easting value for projected coordinates)","title":"Longitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/longitude/#longitude","text":"(common, jvm, native) abstract val longitude: Double The longitude value of this position (or easting value for projected coordinates)","title":"longitude"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/-position/longitude/#property","text":"longitude - The longitude value of this position (or easting value for projected coordinates)","title":"Property"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/","text":"geojson / io.github.dellisd.spatialk.geojson / kotlin.String Extensions for kotlin.String Name Summary (common, jvm, native) toGeometry Converts a JSON string to a Geometry object. fun <T : Geometry > any_iterable<T>.toGeometry(): T (common, jvm, native) toGeometryOrNull Converts a JSON string to a Geometry object. fun <T : Geometry > any_iterable<T>.toGeometryOrNull(): T?","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary (common, jvm, native) toGeometry Converts a JSON string to a Geometry object. fun <T : Geometry > any_iterable<T>.toGeometry(): T (common, jvm, native) toGeometryOrNull Converts a JSON string to a Geometry object. fun <T : Geometry > any_iterable<T>.toGeometryOrNull(): T?","title":"Extensions for kotlin.String"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/to-geometry-or-null/","text":"geojson / io.github.dellisd.spatialk.geojson / kotlin.String / toGeometryOrNull toGeometryOrNull (common) @JvmName(\"fromJsonOrNull\") fun <T : Geometry > String .toGeometryOrNull(): T? (jvm) @JvmName(\"fromJsonOrNull\") fun <T : Geometry > String .toGeometryOrNull(): T? (native) fun <T : Geometry > String .toGeometryOrNull(): T? Converts a JSON string to a Geometry object. Receiver The JSON string to convert. Return One of the seven types of Geometry , or null if it could not be converted","title":"To geometry or null"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/to-geometry-or-null/#togeometryornull","text":"(common) @JvmName(\"fromJsonOrNull\") fun <T : Geometry > String .toGeometryOrNull(): T? (jvm) @JvmName(\"fromJsonOrNull\") fun <T : Geometry > String .toGeometryOrNull(): T? (native) fun <T : Geometry > String .toGeometryOrNull(): T? Converts a JSON string to a Geometry object. Receiver The JSON string to convert. Return One of the seven types of Geometry , or null if it could not be converted","title":"toGeometryOrNull"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/to-geometry/","text":"geojson / io.github.dellisd.spatialk.geojson / kotlin.String / toGeometry toGeometry (common) @JvmName(\"fromJson\") fun <T : Geometry > String .toGeometry(): T (jvm) @JvmName(\"fromJson\") fun <T : Geometry > String .toGeometry(): T (native) fun <T : Geometry > String .toGeometry(): T Converts a JSON string to a Geometry object. Exceptions SerializationException - if the string could not be deserialized to a Geometry object. Receiver The JSON string to convert. Return One of the seven types of Geometry .","title":"To geometry"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/to-geometry/#togeometry","text":"(common) @JvmName(\"fromJson\") fun <T : Geometry > String .toGeometry(): T (jvm) @JvmName(\"fromJson\") fun <T : Geometry > String .toGeometry(): T (native) fun <T : Geometry > String .toGeometry(): T Converts a JSON string to a Geometry object.","title":"toGeometry"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson/kotlin.-string/to-geometry/#exceptions","text":"SerializationException - if the string could not be deserialized to a Geometry object. Receiver The JSON string to convert. Return One of the seven types of Geometry .","title":"Exceptions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization Package io.github.dellisd.spatialk.geojson.serialization Types Name Summary BoundingBoxSerializer (common, jvm) object BoundingBoxSerializer : KSerializer< BoundingBox > (native) object BoundingBoxSerializer (common, jvm, native) FeatureCollectionSerializer object FeatureCollectionSerializer : JsonSerializer< FeatureCollection > (common, jvm, native) FeatureSerializer object FeatureSerializer : JsonSerializer< Feature > GeometrySerializer (common, jvm) object GeometrySerializer : KSerializer< Geometry > (native) object GeometrySerializer PositionSerializer KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] .(common, jvm) object PositionSerializer : KSerializer< Position > (native) object PositionSerializer Companion Object Functions Name Summary serializer (common, jvm) fun Position.Companion.serializer(): KSerializer< Position > (native) fun Position.Companion.serializer(): <ERROR CLASS>< Position >","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/#package-iogithubdellisdspatialkgeojsonserialization","text":"","title":"Package io.github.dellisd.spatialk.geojson.serialization"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/#types","text":"Name Summary BoundingBoxSerializer (common, jvm) object BoundingBoxSerializer : KSerializer< BoundingBox > (native) object BoundingBoxSerializer (common, jvm, native) FeatureCollectionSerializer object FeatureCollectionSerializer : JsonSerializer< FeatureCollection > (common, jvm, native) FeatureSerializer object FeatureSerializer : JsonSerializer< Feature > GeometrySerializer (common, jvm) object GeometrySerializer : KSerializer< Geometry > (native) object GeometrySerializer PositionSerializer KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] .(common, jvm) object PositionSerializer : KSerializer< Position > (native) object PositionSerializer","title":"Types"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/#companion-object-functions","text":"Name Summary serializer (common, jvm) fun Position.Companion.serializer(): KSerializer< Position > (native) fun Position.Companion.serializer(): <ERROR CLASS>< Position >","title":"Companion Object Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/serializer/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / serializer serializer (common, jvm) fun Position.Companion.serializer(): KSerializer< Position > (native) fun Position.Companion.serializer(): <ERROR CLASS>< Position >","title":"Serializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/serializer/#serializer","text":"(common, jvm) fun Position.Companion.serializer(): KSerializer< Position > (native) fun Position.Companion.serializer(): <ERROR CLASS>< Position >","title":"serializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer BoundingBoxSerializer (common, jvm) object BoundingBoxSerializer : KSerializer< BoundingBox > (native) object BoundingBoxSerializer Properties Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS> Functions Name Summary deserialize (native) fun deserialize(decoder: <ERROR CLASS>): BoundingBox (common, jvm) fun deserialize(decoder: Decoder): BoundingBox serialize (native) fun serialize(encoder: <ERROR CLASS>, value: BoundingBox ): Unit (common, jvm) fun serialize(encoder: Encoder, value: BoundingBox ): Unit","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/#boundingboxserializer","text":"(common, jvm) object BoundingBoxSerializer : KSerializer< BoundingBox > (native) object BoundingBoxSerializer","title":"BoundingBoxSerializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/#properties","text":"Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/#functions","text":"Name Summary deserialize (native) fun deserialize(decoder: <ERROR CLASS>): BoundingBox (common, jvm) fun deserialize(decoder: Decoder): BoundingBox serialize (native) fun serialize(encoder: <ERROR CLASS>, value: BoundingBox ): Unit (common, jvm) fun serialize(encoder: Encoder, value: BoundingBox ): Unit","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/descriptor/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer / descriptor descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/descriptor/#descriptor","text":"(common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/deserialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer / deserialize deserialize (common, jvm) fun deserialize(decoder: Decoder): BoundingBox (native) fun deserialize(decoder: <ERROR CLASS>): BoundingBox","title":"Deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/deserialize/#deserialize","text":"(common, jvm) fun deserialize(decoder: Decoder): BoundingBox (native) fun deserialize(decoder: <ERROR CLASS>): BoundingBox","title":"deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/serialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / BoundingBoxSerializer / serialize serialize (common, jvm) fun serialize(encoder: Encoder, value: BoundingBox ): Unit (native) fun serialize(encoder: <ERROR CLASS>, value: BoundingBox ): Unit","title":"Serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-bounding-box-serializer/serialize/#serialize","text":"(common, jvm) fun serialize(encoder: Encoder, value: BoundingBox ): Unit (native) fun serialize(encoder: <ERROR CLASS>, value: BoundingBox ): Unit","title":"serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer FeatureCollectionSerializer (common, jvm, native) object FeatureCollectionSerializer : JsonSerializer< FeatureCollection > Properties Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS> Functions Name Summary deserialize (native) fun deserialize(input: <ERROR CLASS>): FeatureCollection (common, jvm) fun deserialize(input: JsonDecoder): FeatureCollection serialize (native) fun serialize(output: <ERROR CLASS>, value: FeatureCollection ): Unit (common, jvm) fun serialize(output: JsonEncoder, value: FeatureCollection ): Unit","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/#featurecollectionserializer","text":"(common, jvm, native) object FeatureCollectionSerializer : JsonSerializer< FeatureCollection >","title":"FeatureCollectionSerializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/#properties","text":"Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/#functions","text":"Name Summary deserialize (native) fun deserialize(input: <ERROR CLASS>): FeatureCollection (common, jvm) fun deserialize(input: JsonDecoder): FeatureCollection serialize (native) fun serialize(output: <ERROR CLASS>, value: FeatureCollection ): Unit (common, jvm) fun serialize(output: JsonEncoder, value: FeatureCollection ): Unit","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/descriptor/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer / descriptor descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/descriptor/#descriptor","text":"(common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/deserialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer / deserialize deserialize (common, jvm) fun deserialize(input: JsonDecoder): FeatureCollection (native) fun deserialize(input: <ERROR CLASS>): FeatureCollection","title":"Deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/deserialize/#deserialize","text":"(common, jvm) fun deserialize(input: JsonDecoder): FeatureCollection (native) fun deserialize(input: <ERROR CLASS>): FeatureCollection","title":"deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/serialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureCollectionSerializer / serialize serialize (common, jvm) fun serialize(output: JsonEncoder, value: FeatureCollection ): Unit (native) fun serialize(output: <ERROR CLASS>, value: FeatureCollection ): Unit","title":"Serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-collection-serializer/serialize/#serialize","text":"(common, jvm) fun serialize(output: JsonEncoder, value: FeatureCollection ): Unit (native) fun serialize(output: <ERROR CLASS>, value: FeatureCollection ): Unit","title":"serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer FeatureSerializer (common, jvm, native) object FeatureSerializer : JsonSerializer< Feature > Properties Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS> Functions Name Summary deserialize (native) fun deserialize(input: <ERROR CLASS>): Feature (common, jvm) fun deserialize(input: JsonDecoder): Feature serialize (native) fun serialize(output: <ERROR CLASS>, value: Feature ): Unit (common, jvm) fun serialize(output: JsonEncoder, value: Feature ): Unit","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/#featureserializer","text":"(common, jvm, native) object FeatureSerializer : JsonSerializer< Feature >","title":"FeatureSerializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/#properties","text":"Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/#functions","text":"Name Summary deserialize (native) fun deserialize(input: <ERROR CLASS>): Feature (common, jvm) fun deserialize(input: JsonDecoder): Feature serialize (native) fun serialize(output: <ERROR CLASS>, value: Feature ): Unit (common, jvm) fun serialize(output: JsonEncoder, value: Feature ): Unit","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/descriptor/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer / descriptor descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/descriptor/#descriptor","text":"(common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/deserialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer / deserialize deserialize (common, jvm) fun deserialize(input: JsonDecoder): Feature (native) fun deserialize(input: <ERROR CLASS>): Feature","title":"Deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/deserialize/#deserialize","text":"(common, jvm) fun deserialize(input: JsonDecoder): Feature (native) fun deserialize(input: <ERROR CLASS>): Feature","title":"deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/serialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / FeatureSerializer / serialize serialize (common, jvm) fun serialize(output: JsonEncoder, value: Feature ): Unit (native) fun serialize(output: <ERROR CLASS>, value: Feature ): Unit","title":"Serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-feature-serializer/serialize/#serialize","text":"(common, jvm) fun serialize(output: JsonEncoder, value: Feature ): Unit (native) fun serialize(output: <ERROR CLASS>, value: Feature ): Unit","title":"serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer GeometrySerializer (common, jvm) object GeometrySerializer : KSerializer< Geometry > (native) object GeometrySerializer Properties Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS> Functions Name Summary deserialize (native) fun deserialize(decoder: <ERROR CLASS>): Geometry (common, jvm) fun deserialize(decoder: Decoder): Geometry serialize (native) fun serialize(encoder: <ERROR CLASS>, value: Geometry ): Unit (common, jvm) fun serialize(encoder: Encoder, value: Geometry ): Unit","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/#geometryserializer","text":"(common, jvm) object GeometrySerializer : KSerializer< Geometry > (native) object GeometrySerializer","title":"GeometrySerializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/#properties","text":"Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/#functions","text":"Name Summary deserialize (native) fun deserialize(decoder: <ERROR CLASS>): Geometry (common, jvm) fun deserialize(decoder: Decoder): Geometry serialize (native) fun serialize(encoder: <ERROR CLASS>, value: Geometry ): Unit (common, jvm) fun serialize(encoder: Encoder, value: Geometry ): Unit","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/descriptor/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer / descriptor descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/descriptor/#descriptor","text":"(common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/deserialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer / deserialize deserialize (common, jvm) fun deserialize(decoder: Decoder): Geometry (native) fun deserialize(decoder: <ERROR CLASS>): Geometry","title":"Deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/deserialize/#deserialize","text":"(common, jvm) fun deserialize(decoder: Decoder): Geometry (native) fun deserialize(decoder: <ERROR CLASS>): Geometry","title":"deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/serialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / GeometrySerializer / serialize serialize (common, jvm) fun serialize(encoder: Encoder, value: Geometry ): Unit (native) fun serialize(encoder: <ERROR CLASS>, value: Geometry ): Unit","title":"Serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-geometry-serializer/serialize/#serialize","text":"(common, jvm) fun serialize(encoder: Encoder, value: Geometry ): Unit (native) fun serialize(encoder: <ERROR CLASS>, value: Geometry ): Unit","title":"serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer PositionSerializer (common, jvm) object PositionSerializer : KSerializer< Position > (native) object PositionSerializer (common, jvm) KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] . A position's altitude is only included in the array if it is not null. An instance of the serializer can be obtained from the Position.serializer extension function. See Also Position.Companion.serializer (native) KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] . A position's altitude is only included in the array if it is not null. An instance of the serializer can be obtained from the Position.serializer extension function. See Also Position.Companion.serializer Properties Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS> Functions Name Summary deserialize (native) fun deserialize(decoder: <ERROR CLASS>): Position (common, jvm) fun deserialize(decoder: Decoder): Position serialize (native) fun serialize(encoder: <ERROR CLASS>, value: Position ): Unit (common, jvm) fun serialize(encoder: Encoder, value: Position ): Unit","title":"Index"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#positionserializer","text":"(common, jvm) object PositionSerializer : KSerializer< Position > (native) object PositionSerializer (common, jvm) KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] . A position's altitude is only included in the array if it is not null. An instance of the serializer can be obtained from the Position.serializer extension function. See Also Position.Companion.serializer (native) KSerializer implementation for implementations of the Position interface. Serializes a Position down to an array of numbers as specified by GeoJSON. This serializer only works for converting to and from JSON. A position maps to [longitude, latitude, altitude] . A position's altitude is only included in the array if it is not null. An instance of the serializer can be obtained from the Position.serializer extension function. See Also Position.Companion.serializer","title":"PositionSerializer"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#properties","text":"Name Summary descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Properties"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/#functions","text":"Name Summary deserialize (native) fun deserialize(decoder: <ERROR CLASS>): Position (common, jvm) fun deserialize(decoder: Decoder): Position serialize (native) fun serialize(encoder: <ERROR CLASS>, value: Position ): Unit (common, jvm) fun serialize(encoder: Encoder, value: Position ): Unit","title":"Functions"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/descriptor/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer / descriptor descriptor (common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"Descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/descriptor/#descriptor","text":"(common, jvm) val descriptor: SerialDescriptor (native) val descriptor: <ERROR CLASS>","title":"descriptor"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/deserialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer / deserialize deserialize (common, jvm) fun deserialize(decoder: Decoder): Position (native) fun deserialize(decoder: <ERROR CLASS>): Position","title":"Deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/deserialize/#deserialize","text":"(common, jvm) fun deserialize(decoder: Decoder): Position (native) fun deserialize(decoder: <ERROR CLASS>): Position","title":"deserialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/serialize/","text":"geojson / io.github.dellisd.spatialk.geojson.serialization / PositionSerializer / serialize serialize (common, jvm) fun serialize(encoder: Encoder, value: Position ): Unit (native) fun serialize(encoder: <ERROR CLASS>, value: Position ): Unit","title":"Serialize"},{"location":"api/geojson/io.github.dellisd.spatialk.geojson.serialization/-position-serializer/serialize/#serialize","text":"(common, jvm) fun serialize(encoder: Encoder, value: Position ): Unit (native) fun serialize(encoder: <ERROR CLASS>, value: Position ): Unit","title":"serialize"},{"location":"api/geojson-dsl/","text":"geojson-dsl Packages Name Summary (common, jvm, native) io.github.dellisd.spatialk.geojson.dsl Index All Types","title":"geojson-dsl"},{"location":"api/geojson-dsl/#packages","text":"Name Summary (common, jvm, native) io.github.dellisd.spatialk.geojson.dsl","title":"Packages"},{"location":"api/geojson-dsl/#index","text":"All Types","title":"Index"},{"location":"api/geojson-dsl/alltypes/","text":"All Types Name Summary (common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.FeatureCollectionDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.FeatureDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.GeometryCollectionDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.GeometryDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.LineStringDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.MultiLineStringDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.MultiPointDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.MultiPolygonDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.PointDsl |(common, jvm, native) io.github.dellisd.spatialk.geojson.dsl.PolygonDsl","title":"Index"},{"location":"api/geojson-dsl/alltypes/#all-types","text":"Name Summary (common, jvm, native)","title":"All Types"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslfeaturecollectiondsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.FeatureCollectionDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslfeaturedsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.FeatureDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslgeometrycollectiondsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.GeometryCollectionDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslgeometrydsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.GeometryDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondsllinestringdsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.LineStringDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslmultilinestringdsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.MultiLineStringDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslmultipointdsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.MultiPointDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslmultipolygondsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.MultiPolygonDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslpointdsl","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.dsl.PointDsl"},{"location":"api/geojson-dsl/alltypes/#iogithubdellisdspatialkgeojsondslpolygondsl","text":"","title":"io.github.dellisd.spatialk.geojson.dsl.PolygonDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl Package io.github.dellisd.spatialk.geojson.dsl Types Name Summary (common, jvm, native) FeatureCollectionDsl class FeatureCollectionDsl (common, jvm, native) FeatureDsl class FeatureDsl GeometryCollectionDsl (common, jvm) class GeometryCollectionDsl : GeometryDsl <GeometryCollection> (native) class GeometryCollectionDsl : GeometryDsl <<ERROR CLASS>> GeometryDsl (common, jvm) abstract class GeometryDsl<T : Geometry> (native) abstract class GeometryDsl<T> LineStringDsl (common, jvm) class LineStringDsl : GeometryDsl <LineString> (native) class LineStringDsl : GeometryDsl <<ERROR CLASS>> MultiLineStringDsl (common, jvm) class MultiLineStringDsl : GeometryDsl <MultiLineString> (native) class MultiLineStringDsl : GeometryDsl <<ERROR CLASS>> MultiPointDsl (common, jvm) class MultiPointDsl : GeometryDsl <MultiPoint> (native) class MultiPointDsl : GeometryDsl <<ERROR CLASS>> MultiPolygonDsl (common, jvm) class MultiPolygonDsl : GeometryDsl <MultiPolygon> (native) class MultiPolygonDsl : GeometryDsl <<ERROR CLASS>> PointDsl (common, jvm) class PointDsl : GeometryDsl <Point> (native) class PointDsl : GeometryDsl <<ERROR CLASS>> PolygonDsl (common, jvm) class PolygonDsl : GeometryDsl <Polygon> (native) class PolygonDsl : GeometryDsl <<ERROR CLASS>> Functions Name Summary feature (common, jvm) fun feature(block: FeatureDsl .() -> Unit ): Feature (native) fun feature(block: FeatureDsl .() -> Unit ): <ERROR CLASS> featureCollection (common, jvm) fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): FeatureCollection (native) fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): <ERROR CLASS> geometryCollection (common, jvm) fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): GeometryCollection (native) fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): <ERROR CLASS> lineString (common, jvm) fun lineString(block: LineStringDsl .() -> Unit ): LineString (native) fun lineString(block: LineStringDsl .() -> Unit ): <ERROR CLASS> multiLineString (common, jvm) fun multiLineString(block: MultiLineStringDsl .() -> Unit ): MultiLineString (native) fun multiLineString(block: MultiLineStringDsl .() -> Unit ): <ERROR CLASS> multiPoint (common, jvm) fun multiPoint(block: MultiPointDsl .() -> Unit ): MultiPoint (native) fun multiPoint(block: MultiPointDsl .() -> Unit ): <ERROR CLASS> multiPolygon (common, jvm) fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): MultiPolygon (native) fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): <ERROR CLASS> point (common, jvm) fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point (native) fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): <ERROR CLASS> polygon (common, jvm) fun polygon(block: PolygonDsl .() -> Unit ): Polygon (native) fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS>","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/#package-iogithubdellisdspatialkgeojsondsl","text":"","title":"Package io.github.dellisd.spatialk.geojson.dsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/#types","text":"Name Summary (common, jvm, native) FeatureCollectionDsl class FeatureCollectionDsl (common, jvm, native) FeatureDsl class FeatureDsl GeometryCollectionDsl (common, jvm) class GeometryCollectionDsl : GeometryDsl <GeometryCollection> (native) class GeometryCollectionDsl : GeometryDsl <<ERROR CLASS>> GeometryDsl (common, jvm) abstract class GeometryDsl<T : Geometry> (native) abstract class GeometryDsl<T> LineStringDsl (common, jvm) class LineStringDsl : GeometryDsl <LineString> (native) class LineStringDsl : GeometryDsl <<ERROR CLASS>> MultiLineStringDsl (common, jvm) class MultiLineStringDsl : GeometryDsl <MultiLineString> (native) class MultiLineStringDsl : GeometryDsl <<ERROR CLASS>> MultiPointDsl (common, jvm) class MultiPointDsl : GeometryDsl <MultiPoint> (native) class MultiPointDsl : GeometryDsl <<ERROR CLASS>> MultiPolygonDsl (common, jvm) class MultiPolygonDsl : GeometryDsl <MultiPolygon> (native) class MultiPolygonDsl : GeometryDsl <<ERROR CLASS>> PointDsl (common, jvm) class PointDsl : GeometryDsl <Point> (native) class PointDsl : GeometryDsl <<ERROR CLASS>> PolygonDsl (common, jvm) class PolygonDsl : GeometryDsl <Polygon> (native) class PolygonDsl : GeometryDsl <<ERROR CLASS>>","title":"Types"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/#functions","text":"Name Summary feature (common, jvm) fun feature(block: FeatureDsl .() -> Unit ): Feature (native) fun feature(block: FeatureDsl .() -> Unit ): <ERROR CLASS> featureCollection (common, jvm) fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): FeatureCollection (native) fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): <ERROR CLASS> geometryCollection (common, jvm) fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): GeometryCollection (native) fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): <ERROR CLASS> lineString (common, jvm) fun lineString(block: LineStringDsl .() -> Unit ): LineString (native) fun lineString(block: LineStringDsl .() -> Unit ): <ERROR CLASS> multiLineString (common, jvm) fun multiLineString(block: MultiLineStringDsl .() -> Unit ): MultiLineString (native) fun multiLineString(block: MultiLineStringDsl .() -> Unit ): <ERROR CLASS> multiPoint (common, jvm) fun multiPoint(block: MultiPointDsl .() -> Unit ): MultiPoint (native) fun multiPoint(block: MultiPointDsl .() -> Unit ): <ERROR CLASS> multiPolygon (common, jvm) fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): MultiPolygon (native) fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): <ERROR CLASS> point (common, jvm) fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point (native) fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): <ERROR CLASS> polygon (common, jvm) fun polygon(block: PolygonDsl .() -> Unit ): Polygon (native) fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS>","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/feature-collection/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / featureCollection featureCollection (common, jvm) inline fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): FeatureCollection (native) inline fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): <ERROR CLASS>","title":"Feature collection"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/feature-collection/#featurecollection","text":"(common, jvm) inline fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): FeatureCollection (native) inline fun featureCollection(block: FeatureCollectionDsl .() -> Unit ): <ERROR CLASS>","title":"featureCollection"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/feature/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / feature feature (common, jvm) inline fun feature(block: FeatureDsl .() -> Unit ): Feature (native) inline fun feature(block: FeatureDsl .() -> Unit ): <ERROR CLASS>","title":"Feature"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/feature/#feature","text":"(common, jvm) inline fun feature(block: FeatureDsl .() -> Unit ): Feature (native) inline fun feature(block: FeatureDsl .() -> Unit ): <ERROR CLASS>","title":"feature"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/geometry-collection/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / geometryCollection geometryCollection (common, jvm) inline fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): GeometryCollection (native) inline fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): <ERROR CLASS>","title":"Geometry collection"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/geometry-collection/#geometrycollection","text":"(common, jvm) inline fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): GeometryCollection (native) inline fun geometryCollection(block: GeometryCollectionDsl .() -> Unit ): <ERROR CLASS>","title":"geometryCollection"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/line-string/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / lineString lineString (common, jvm) inline fun lineString(block: LineStringDsl .() -> Unit ): LineString (native) inline fun lineString(block: LineStringDsl .() -> Unit ): <ERROR CLASS>","title":"Line string"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/line-string/#linestring","text":"(common, jvm) inline fun lineString(block: LineStringDsl .() -> Unit ): LineString (native) inline fun lineString(block: LineStringDsl .() -> Unit ): <ERROR CLASS>","title":"lineString"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/multi-line-string/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / multiLineString multiLineString (common, jvm) inline fun multiLineString(block: MultiLineStringDsl .() -> Unit ): MultiLineString (native) inline fun multiLineString(block: MultiLineStringDsl .() -> Unit ): <ERROR CLASS>","title":"Multi line string"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/multi-line-string/#multilinestring","text":"(common, jvm) inline fun multiLineString(block: MultiLineStringDsl .() -> Unit ): MultiLineString (native) inline fun multiLineString(block: MultiLineStringDsl .() -> Unit ): <ERROR CLASS>","title":"multiLineString"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/multi-point/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / multiPoint multiPoint (common, jvm) inline fun multiPoint(block: MultiPointDsl .() -> Unit ): MultiPoint (native) inline fun multiPoint(block: MultiPointDsl .() -> Unit ): <ERROR CLASS>","title":"Multi point"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/multi-point/#multipoint","text":"(common, jvm) inline fun multiPoint(block: MultiPointDsl .() -> Unit ): MultiPoint (native) inline fun multiPoint(block: MultiPointDsl .() -> Unit ): <ERROR CLASS>","title":"multiPoint"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/multi-polygon/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / multiPolygon multiPolygon (common, jvm) inline fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): MultiPolygon (native) inline fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): <ERROR CLASS>","title":"Multi polygon"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/multi-polygon/#multipolygon","text":"(common, jvm) inline fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): MultiPolygon (native) inline fun multiPolygon(block: MultiPolygonDsl .() -> Unit ): <ERROR CLASS>","title":"multiPolygon"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/point/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / point point (common, jvm) inline fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point (native) inline fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): <ERROR CLASS>","title":"Point"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/point/#point","text":"(common, jvm) inline fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): Point (native) inline fun point(longitude: Double , latitude: Double , altitude: Double ? = null, block: PointDsl .() -> Unit = {}): <ERROR CLASS>","title":"point"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/polygon/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / polygon polygon (common, jvm) inline fun polygon(block: PolygonDsl .() -> Unit ): Polygon (native) inline fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS>","title":"Polygon"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/polygon/#polygon","text":"(common, jvm) inline fun polygon(block: PolygonDsl .() -> Unit ): Polygon (native) inline fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS>","title":"polygon"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl FeatureCollectionDsl (common, jvm, native) class FeatureCollectionDsl Constructors Name Summary <init> (native) FeatureCollectionDsl(features: MutableList <<ERROR CLASS>> = mutableListOf(), bbox: <ERROR CLASS>? = null) (common, jvm) <init>(features: MutableList <Feature> = mutableListOf(), bbox: BoundingBox? = null) Properties Name Summary bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>? Functions Name Summary create (common, jvm) fun create(): FeatureCollection (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Feature.unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#featurecollectiondsl","text":"(common, jvm, native) class FeatureCollectionDsl","title":"FeatureCollectionDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#constructors","text":"Name Summary <init> (native) FeatureCollectionDsl(features: MutableList <<ERROR CLASS>> = mutableListOf(), bbox: <ERROR CLASS>? = null) (common, jvm) <init>(features: MutableList <Feature> = mutableListOf(), bbox: BoundingBox? = null)","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#properties","text":"Name Summary bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"Properties"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): FeatureCollection (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Feature.unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / <init> <init> (common, jvm) <init>(features: MutableList <Feature> = mutableListOf(), bbox: BoundingBox? = null) (native) FeatureCollectionDsl(features: MutableList <<ERROR CLASS>> = mutableListOf(), bbox: <ERROR CLASS>? = null)","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/-init-/#init","text":"(common, jvm) <init>(features: MutableList <Feature> = mutableListOf(), bbox: BoundingBox? = null) (native) FeatureCollectionDsl(features: MutableList <<ERROR CLASS>> = mutableListOf(), bbox: <ERROR CLASS>? = null)","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/bbox/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / bbox bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"Bbox"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/bbox/#bbox","text":"(common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"bbox"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / create create (common, jvm) fun create(): FeatureCollection (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/create/#create","text":"(common, jvm) fun create(): FeatureCollection (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureCollectionDsl / unaryPlus unaryPlus (common, jvm) operator fun Feature.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-collection-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun Feature.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl FeatureDsl (common, jvm, native) class FeatureDsl Types Name Summary (common, jvm, native) PropertiesDsl inner class PropertiesDsl Constructors Name Summary <init> (native) FeatureDsl(geometry: <ERROR CLASS>? = null, bbox: <ERROR CLASS>? = null, id: String ? = null, properties: MutableMap < String , <ERROR CLASS>> = mutableMapOf()) (common, jvm) <init>(geometry: Geometry? = null, bbox: BoundingBox? = null, id: String ? = null, properties: MutableMap < String , JsonElement> = mutableMapOf()) Properties Name Summary bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>? geometry (common, jvm) var geometry: Geometry? (native) var geometry: <ERROR CLASS>? (common, jvm, native) id var id: String ? Functions Name Summary create (common, jvm) fun create(): Feature (native) fun create(): <ERROR CLASS> (common, jvm, native) properties fun properties(block: PropertiesDsl .() -> Unit ): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/#featuredsl","text":"(common, jvm, native) class FeatureDsl","title":"FeatureDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/#types","text":"Name Summary (common, jvm, native) PropertiesDsl inner class PropertiesDsl","title":"Types"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/#constructors","text":"Name Summary <init> (native) FeatureDsl(geometry: <ERROR CLASS>? = null, bbox: <ERROR CLASS>? = null, id: String ? = null, properties: MutableMap < String , <ERROR CLASS>> = mutableMapOf()) (common, jvm) <init>(geometry: Geometry? = null, bbox: BoundingBox? = null, id: String ? = null, properties: MutableMap < String , JsonElement> = mutableMapOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/#properties","text":"Name Summary bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>? geometry (common, jvm) var geometry: Geometry? (native) var geometry: <ERROR CLASS>? (common, jvm, native) id var id: String ?","title":"Properties"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): Feature (native) fun create(): <ERROR CLASS> (common, jvm, native) properties fun properties(block: PropertiesDsl .() -> Unit ): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / <init> <init> (common, jvm) <init>(geometry: Geometry? = null, bbox: BoundingBox? = null, id: String ? = null, properties: MutableMap < String , JsonElement> = mutableMapOf()) (native) FeatureDsl(geometry: <ERROR CLASS>? = null, bbox: <ERROR CLASS>? = null, id: String ? = null, properties: MutableMap < String , <ERROR CLASS>> = mutableMapOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-init-/#init","text":"(common, jvm) <init>(geometry: Geometry? = null, bbox: BoundingBox? = null, id: String ? = null, properties: MutableMap < String , JsonElement> = mutableMapOf()) (native) FeatureDsl(geometry: <ERROR CLASS>? = null, bbox: <ERROR CLASS>? = null, id: String ? = null, properties: MutableMap < String , <ERROR CLASS>> = mutableMapOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/bbox/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / bbox bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"Bbox"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/bbox/#bbox","text":"(common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"bbox"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / create create (common, jvm) fun create(): Feature (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/create/#create","text":"(common, jvm) fun create(): Feature (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/geometry/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / geometry geometry (common, jvm) var geometry: Geometry? (native) var geometry: <ERROR CLASS>?","title":"Geometry"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/geometry/#geometry","text":"(common, jvm) var geometry: Geometry? (native) var geometry: <ERROR CLASS>?","title":"geometry"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/id/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / id id (common, jvm, native) var id: String ?","title":"Id"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/id/#id","text":"(common, jvm, native) var id: String ?","title":"id"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/properties/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / properties properties (common, jvm, native) fun properties(block: PropertiesDsl .() -> Unit ): Unit","title":"Properties"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/properties/#properties","text":"(common, jvm, native) fun properties(block: PropertiesDsl .() -> Unit ): Unit","title":"properties"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / PropertiesDsl PropertiesDsl (common, jvm, native) inner class PropertiesDsl Constructors Name Summary (common, jvm, native) <init> <init>() Functions Name Summary to (native) infix fun String .to(json: <ERROR CLASS>): Unit (common, jvm, native) infix fun String .to(string: String ?): Unit (common, jvm, native) infix fun String .to(number: Number ): Unit (common, jvm, native) infix fun String .to(boolean: Boolean ): Unit (common, jvm) infix fun String .to(json: JsonElement): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/#propertiesdsl","text":"(common, jvm, native) inner class PropertiesDsl","title":"PropertiesDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/#constructors","text":"Name Summary (common, jvm, native) <init> <init>()","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/#functions","text":"Name Summary to (native) infix fun String .to(json: <ERROR CLASS>): Unit (common, jvm, native) infix fun String .to(string: String ?): Unit (common, jvm, native) infix fun String .to(number: Number ): Unit (common, jvm, native) infix fun String .to(boolean: Boolean ): Unit (common, jvm) infix fun String .to(json: JsonElement): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / PropertiesDsl / <init> <init> (common, jvm, native) <init>()","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/-init-/#init","text":"(common, jvm, native) <init>()","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/to/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / FeatureDsl / PropertiesDsl / to to (common, jvm, native) infix fun String .to(string: String ?): Unit infix fun String .to(number: Number ): Unit infix fun String .to(boolean: Boolean ): Unit (common, jvm) infix fun String .to(json: JsonElement): Unit (native) infix fun String .to(json: <ERROR CLASS>): Unit","title":"To"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-feature-dsl/-properties-dsl/to/#to","text":"(common, jvm, native) infix fun String .to(string: String ?): Unit infix fun String .to(number: Number ): Unit infix fun String .to(boolean: Boolean ): Unit (common, jvm) infix fun String .to(json: JsonElement): Unit (native) infix fun String .to(json: <ERROR CLASS>): Unit","title":"to"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl GeometryCollectionDsl (common, jvm) class GeometryCollectionDsl : GeometryDsl <GeometryCollection> (native) class GeometryCollectionDsl : GeometryDsl <<ERROR CLASS>> Constructors Name Summary <init> (native) GeometryCollectionDsl(geometries: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(geometries: MutableList <Geometry> = mutableListOf()) Functions Name Summary create (common, jvm) fun create(): GeometryCollection (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Geometry.unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/#geometrycollectiondsl","text":"(common, jvm) class GeometryCollectionDsl : GeometryDsl <GeometryCollection> (native) class GeometryCollectionDsl : GeometryDsl <<ERROR CLASS>>","title":"GeometryCollectionDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/#constructors","text":"Name Summary <init> (native) GeometryCollectionDsl(geometries: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(geometries: MutableList <Geometry> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): GeometryCollection (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Geometry.unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl / <init> <init> (common, jvm) <init>(geometries: MutableList <Geometry> = mutableListOf()) (native) GeometryCollectionDsl(geometries: MutableList <<ERROR CLASS>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/-init-/#init","text":"(common, jvm) <init>(geometries: MutableList <Geometry> = mutableListOf()) (native) GeometryCollectionDsl(geometries: MutableList <<ERROR CLASS>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl / create create (common, jvm) fun create(): GeometryCollection (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/create/#create","text":"(common, jvm) fun create(): GeometryCollection (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryCollectionDsl / unaryPlus unaryPlus (common, jvm) operator fun Geometry.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-collection-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun Geometry.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl GeometryDsl (common, jvm) abstract class GeometryDsl<T : Geometry> (native) abstract class GeometryDsl<T> Constructors Name Summary <init> (native) GeometryDsl(bbox: <ERROR CLASS>? = null) (common, jvm) <init>(bbox: BoundingBox? = null) Properties Name Summary bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>? Functions Name Summary (common, jvm, native) create abstract fun create(): T Inheritors Name Summary GeometryCollectionDsl (common, jvm) class GeometryCollectionDsl : GeometryDsl <GeometryCollection> (native) class GeometryCollectionDsl : GeometryDsl <<ERROR CLASS>> LineStringDsl (common, jvm) class LineStringDsl : GeometryDsl <LineString> (native) class LineStringDsl : GeometryDsl <<ERROR CLASS>> MultiLineStringDsl (common, jvm) class MultiLineStringDsl : GeometryDsl <MultiLineString> (native) class MultiLineStringDsl : GeometryDsl <<ERROR CLASS>> MultiPointDsl (common, jvm) class MultiPointDsl : GeometryDsl <MultiPoint> (native) class MultiPointDsl : GeometryDsl <<ERROR CLASS>> MultiPolygonDsl (common, jvm) class MultiPolygonDsl : GeometryDsl <MultiPolygon> (native) class MultiPolygonDsl : GeometryDsl <<ERROR CLASS>> PointDsl (common, jvm) class PointDsl : GeometryDsl <Point> (native) class PointDsl : GeometryDsl <<ERROR CLASS>> PolygonDsl (common, jvm) class PolygonDsl : GeometryDsl <Polygon> (native) class PolygonDsl : GeometryDsl <<ERROR CLASS>>","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#geometrydsl","text":"(common, jvm) abstract class GeometryDsl<T : Geometry> (native) abstract class GeometryDsl<T>","title":"GeometryDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#constructors","text":"Name Summary <init> (native) GeometryDsl(bbox: <ERROR CLASS>? = null) (common, jvm) <init>(bbox: BoundingBox? = null)","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#properties","text":"Name Summary bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"Properties"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#functions","text":"Name Summary (common, jvm, native) create abstract fun create(): T","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/#inheritors","text":"Name Summary GeometryCollectionDsl (common, jvm) class GeometryCollectionDsl : GeometryDsl <GeometryCollection> (native) class GeometryCollectionDsl : GeometryDsl <<ERROR CLASS>> LineStringDsl (common, jvm) class LineStringDsl : GeometryDsl <LineString> (native) class LineStringDsl : GeometryDsl <<ERROR CLASS>> MultiLineStringDsl (common, jvm) class MultiLineStringDsl : GeometryDsl <MultiLineString> (native) class MultiLineStringDsl : GeometryDsl <<ERROR CLASS>> MultiPointDsl (common, jvm) class MultiPointDsl : GeometryDsl <MultiPoint> (native) class MultiPointDsl : GeometryDsl <<ERROR CLASS>> MultiPolygonDsl (common, jvm) class MultiPolygonDsl : GeometryDsl <MultiPolygon> (native) class MultiPolygonDsl : GeometryDsl <<ERROR CLASS>> PointDsl (common, jvm) class PointDsl : GeometryDsl <Point> (native) class PointDsl : GeometryDsl <<ERROR CLASS>> PolygonDsl (common, jvm) class PolygonDsl : GeometryDsl <Polygon> (native) class PolygonDsl : GeometryDsl <<ERROR CLASS>>","title":"Inheritors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl / <init> <init> (common, jvm) protected <init>(bbox: BoundingBox? = null) (native) protected GeometryDsl(bbox: <ERROR CLASS>? = null)","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/-init-/#init","text":"(common, jvm) protected <init>(bbox: BoundingBox? = null) (native) protected GeometryDsl(bbox: <ERROR CLASS>? = null)","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/bbox/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl / bbox bbox (common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"Bbox"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/bbox/#bbox","text":"(common, jvm) var bbox: BoundingBox? (native) var bbox: <ERROR CLASS>?","title":"bbox"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / GeometryDsl / create create (common, jvm, native) abstract fun create(): T","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-geometry-dsl/create/#create","text":"(common, jvm, native) abstract fun create(): T","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl LineStringDsl (common, jvm) class LineStringDsl : GeometryDsl <LineString> (native) class LineStringDsl : GeometryDsl <<ERROR CLASS>> Constructors Name Summary <init> (native) LineStringDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) Functions Name Summary create (common, jvm) fun create(): LineString (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Position.unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/#linestringdsl","text":"(common, jvm) class LineStringDsl : GeometryDsl <LineString> (native) class LineStringDsl : GeometryDsl <<ERROR CLASS>>","title":"LineStringDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/#constructors","text":"Name Summary <init> (native) LineStringDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): LineString (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Position.unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / <init> <init> (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) (native) LineStringDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) (native) LineStringDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / create create (common, jvm) fun create(): LineString (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/create/#create","text":"(common, jvm) fun create(): LineString (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / LineStringDsl / unaryPlus unaryPlus (common, jvm) operator fun Position.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-line-string-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun Position.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl MultiLineStringDsl (common, jvm) class MultiLineStringDsl : GeometryDsl <MultiLineString> (native) class MultiLineStringDsl : GeometryDsl <<ERROR CLASS>> Constructors Name Summary <init> (native) MultiLineStringDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf()) Functions Name Summary create (common, jvm) fun create(): MultiLineString (native) fun create(): <ERROR CLASS> (common, jvm, native) lineString fun lineString(block: LineStringDsl .() -> Unit ): LineStringDsl unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/#multilinestringdsl","text":"(common, jvm) class MultiLineStringDsl : GeometryDsl <MultiLineString> (native) class MultiLineStringDsl : GeometryDsl <<ERROR CLASS>>","title":"MultiLineStringDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/#constructors","text":"Name Summary <init> (native) MultiLineStringDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): MultiLineString (native) fun create(): <ERROR CLASS> (common, jvm, native) lineString fun lineString(block: LineStringDsl .() -> Unit ): LineStringDsl unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / <init> <init> (common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf()) (native) MultiLineStringDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf()) (native) MultiLineStringDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / create create (common, jvm) fun create(): MultiLineString (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/create/#create","text":"(common, jvm) fun create(): MultiLineString (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/line-string/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / lineString lineString (common, jvm, native) inline fun lineString(block: LineStringDsl .() -> Unit ): LineStringDsl","title":"Line string"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/line-string/#linestring","text":"(common, jvm, native) inline fun lineString(block: LineStringDsl .() -> Unit ): LineStringDsl","title":"lineString"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiLineStringDsl / unaryPlus unaryPlus (common, jvm) operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-line-string-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl MultiPointDsl (common, jvm) class MultiPointDsl : GeometryDsl <MultiPoint> (native) class MultiPointDsl : GeometryDsl <<ERROR CLASS>> Constructors Name Summary <init> (native) MultiPointDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) Functions Name Summary create (common, jvm) fun create(): MultiPoint (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Position.unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/#multipointdsl","text":"(common, jvm) class MultiPointDsl : GeometryDsl <MultiPoint> (native) class MultiPointDsl : GeometryDsl <<ERROR CLASS>>","title":"MultiPointDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/#constructors","text":"Name Summary <init> (native) MultiPointDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): MultiPoint (native) fun create(): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Position.unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / <init> <init> (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) (native) MultiPointDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) (native) MultiPointDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / create create (common, jvm) fun create(): MultiPoint (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/create/#create","text":"(common, jvm) fun create(): MultiPoint (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPointDsl / unaryPlus unaryPlus (common, jvm) operator fun Position.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-point-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun Position.unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl MultiPolygonDsl (common, jvm) class MultiPolygonDsl : GeometryDsl <MultiPolygon> (native) class MultiPolygonDsl : GeometryDsl <<ERROR CLASS>> Constructors Name Summary <init> (native) MultiPolygonDsl(coordinates: MutableList < List < List <<ERROR CLASS>>>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList < List < List <Position>>> = mutableListOf()) Functions Name Summary create (common, jvm) fun create(): MultiPolygon (native) fun create(): <ERROR CLASS> polygon (common, jvm) fun polygon(block: PolygonDsl .() -> Unit ): PolygonDsl (native) fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Polygon.unaryPlus(): Unit (common, jvm, native) operator fun PolygonDsl .unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/#multipolygondsl","text":"(common, jvm) class MultiPolygonDsl : GeometryDsl <MultiPolygon> (native) class MultiPolygonDsl : GeometryDsl <<ERROR CLASS>>","title":"MultiPolygonDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/#constructors","text":"Name Summary <init> (native) MultiPolygonDsl(coordinates: MutableList < List < List <<ERROR CLASS>>>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList < List < List <Position>>> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): MultiPolygon (native) fun create(): <ERROR CLASS> polygon (common, jvm) fun polygon(block: PolygonDsl .() -> Unit ): PolygonDsl (native) fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS> unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Polygon.unaryPlus(): Unit (common, jvm, native) operator fun PolygonDsl .unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / <init> <init> (common, jvm) <init>(coordinates: MutableList < List < List <Position>>> = mutableListOf()) (native) MultiPolygonDsl(coordinates: MutableList < List < List <<ERROR CLASS>>>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: MutableList < List < List <Position>>> = mutableListOf()) (native) MultiPolygonDsl(coordinates: MutableList < List < List <<ERROR CLASS>>>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / create create (common, jvm) fun create(): MultiPolygon (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/create/#create","text":"(common, jvm) fun create(): MultiPolygon (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/polygon/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / polygon polygon (common, jvm) inline fun polygon(block: PolygonDsl .() -> Unit ): PolygonDsl (native) inline fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS>","title":"Polygon"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/polygon/#polygon","text":"(common, jvm) inline fun polygon(block: PolygonDsl .() -> Unit ): PolygonDsl (native) inline fun polygon(block: PolygonDsl .() -> Unit ): <ERROR CLASS>","title":"polygon"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / MultiPolygonDsl / unaryPlus unaryPlus (common, jvm) operator fun Polygon.unaryPlus(): Unit (common, jvm, native) operator fun PolygonDsl .unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-multi-polygon-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun Polygon.unaryPlus(): Unit (common, jvm, native) operator fun PolygonDsl .unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PointDsl PointDsl (common, jvm) class PointDsl : GeometryDsl <Point> (native) class PointDsl : GeometryDsl <<ERROR CLASS>> Constructors Name Summary <init> (native) PointDsl(coordinates: <ERROR CLASS>) (common, jvm) <init>(coordinates: Position) Functions Name Summary create (common, jvm) fun create(): Point (native) fun create(): <ERROR CLASS>","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/#pointdsl","text":"(common, jvm) class PointDsl : GeometryDsl <Point> (native) class PointDsl : GeometryDsl <<ERROR CLASS>>","title":"PointDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/#constructors","text":"Name Summary <init> (native) PointDsl(coordinates: <ERROR CLASS>) (common, jvm) <init>(coordinates: Position)","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): Point (native) fun create(): <ERROR CLASS>","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PointDsl / <init> <init> (common, jvm) <init>(coordinates: Position) (native) PointDsl(coordinates: <ERROR CLASS>)","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: Position) (native) PointDsl(coordinates: <ERROR CLASS>)","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PointDsl / create create (common, jvm) fun create(): Point (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-point-dsl/create/#create","text":"(common, jvm) fun create(): Point (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl PolygonDsl (common, jvm) class PolygonDsl : GeometryDsl <Polygon> (native) class PolygonDsl : GeometryDsl <<ERROR CLASS>> Types Name Summary (common, jvm, native) RingDsl inner class RingDsl Constructors Name Summary <init> (native) PolygonDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf()) Functions Name Summary create (common, jvm) fun create(): Polygon (native) fun create(): <ERROR CLASS> (common, jvm, native) ring fun ring(block: RingDsl .() -> Unit ): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#polygondsl","text":"(common, jvm) class PolygonDsl : GeometryDsl <Polygon> (native) class PolygonDsl : GeometryDsl <<ERROR CLASS>>","title":"PolygonDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#types","text":"Name Summary (common, jvm, native) RingDsl inner class RingDsl","title":"Types"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#constructors","text":"Name Summary <init> (native) PolygonDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/#functions","text":"Name Summary create (common, jvm) fun create(): Polygon (native) fun create(): <ERROR CLASS> (common, jvm, native) ring fun ring(block: RingDsl .() -> Unit ): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / <init> <init> (common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf()) (native) PolygonDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: MutableList < List <Position>> = mutableListOf()) (native) PolygonDsl(coordinates: MutableList < List <<ERROR CLASS>>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/create/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / create create (common, jvm) fun create(): Polygon (native) fun create(): <ERROR CLASS>","title":"Create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/create/#create","text":"(common, jvm) fun create(): Polygon (native) fun create(): <ERROR CLASS>","title":"create"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/ring/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / ring ring (common, jvm, native) fun ring(block: RingDsl .() -> Unit ): Unit","title":"Ring"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/ring/#ring","text":"(common, jvm, native) fun ring(block: RingDsl .() -> Unit ): Unit","title":"ring"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl RingDsl (common, jvm, native) inner class RingDsl Constructors Name Summary <init> (native) RingDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) Functions Name Summary (common, jvm, native) complete fun complete(): Unit unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Position.unaryPlus(): Unit (common, jvm) operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit","title":"Index"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/#ringdsl","text":"(common, jvm, native) inner class RingDsl","title":"RingDsl"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/#constructors","text":"Name Summary <init> (native) RingDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf()) (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf())","title":"Constructors"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/#functions","text":"Name Summary (common, jvm, native) complete fun complete(): Unit unaryPlus (native) operator fun <ERROR CLASS>.unaryPlus(): Unit (common, jvm) operator fun Position.unaryPlus(): Unit (common, jvm) operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit","title":"Functions"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/-init-/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / <init> <init> (common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) (native) RingDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf())","title":" init "},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/-init-/#init","text":"(common, jvm) <init>(coordinates: MutableList <Position> = mutableListOf()) (native) RingDsl(coordinates: MutableList <<ERROR CLASS>> = mutableListOf())","title":"&lt;init&gt;"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/complete/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / complete complete (common, jvm, native) fun complete(): Unit","title":"Complete"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/complete/#complete","text":"(common, jvm, native) fun complete(): Unit","title":"complete"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/unary-plus/","text":"geojson-dsl / io.github.dellisd.spatialk.geojson.dsl / PolygonDsl / RingDsl / unaryPlus unaryPlus (common, jvm) operator fun Position.unaryPlus(): Unit operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"Unary plus"},{"location":"api/geojson-dsl/io.github.dellisd.spatialk.geojson.dsl/-polygon-dsl/-ring-dsl/unary-plus/#unaryplus","text":"(common, jvm) operator fun Position.unaryPlus(): Unit operator fun LineString.unaryPlus(): Unit (common, jvm, native) operator fun LineStringDsl .unaryPlus(): Unit (native) operator fun <ERROR CLASS>.unaryPlus(): Unit operator fun <ERROR CLASS>.unaryPlus(): Unit","title":"unaryPlus"},{"location":"api/turf/","text":"turf Packages Name Summary (common, jvm, native) io.github.dellisd.spatialk.turf Index All Types","title":"turf"},{"location":"api/turf/#packages","text":"Name Summary (common, jvm, native) io.github.dellisd.spatialk.turf","title":"Packages"},{"location":"api/turf/#index","text":"All Types","title":"Index"},{"location":"api/turf/alltypes/","text":"All Types Name Summary (common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.BoundingBox |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.Feature |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.FeatureCollection |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.Geometry |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.GeometryCollection |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.LineString |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.MultiLineString |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.MultiPoint |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.MultiPolygon |(common, jvm, native) io.github.dellisd.spatialk.turf.NearestPointOnLineResult Result values from nearestPointOnLine . |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.Point |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf) io.github.dellisd.spatialk.geojson.Polygon |(common, jvm, native) io.github.dellisd.spatialk.turf.Units Supported units of measurement in Turf.","title":"Index"},{"location":"api/turf/alltypes/#all-types","text":"Name Summary (common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"All Types"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonboundingbox","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.BoundingBox"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonfeature","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.Feature"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonfeaturecollection","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.FeatureCollection"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsongeometry","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.Geometry"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsongeometrycollection","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.GeometryCollection"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonlinestring","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.LineString"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonmultilinestring","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.MultiLineString"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonmultipoint","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.MultiPoint"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonmultipolygon","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.MultiPolygon"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkturfnearestpointonlineresult","text":"Result values from nearestPointOnLine . |(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.turf.NearestPointOnLineResult"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonpoint","text":"|(common, jvm) (extensions in package io.github.dellisd.spatialk.turf)","title":"io.github.dellisd.spatialk.geojson.Point"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkgeojsonpolygon","text":"|(common, jvm, native)","title":"io.github.dellisd.spatialk.geojson.Polygon"},{"location":"api/turf/alltypes/#iogithubdellisdspatialkturfunits","text":"Supported units of measurement in Turf.","title":"io.github.dellisd.spatialk.turf.Units"},{"location":"api/turf/io.github.dellisd.spatialk.turf/","text":"turf / io.github.dellisd.spatialk.turf Package io.github.dellisd.spatialk.turf Types Name Summary (common, jvm, native) NearestPointOnLineResult Result values from nearestPointOnLine . data class NearestPointOnLineResult (common, jvm, native) Units Supported units of measurement in Turf. enum class Units Extensions for External Classes Name Summary (common, jvm) io.github.dellisd.spatialk.geojson.BoundingBox (common, jvm) io.github.dellisd.spatialk.geojson.Feature (common, jvm) io.github.dellisd.spatialk.geojson.FeatureCollection (common, jvm) io.github.dellisd.spatialk.geojson.Geometry (common, jvm) io.github.dellisd.spatialk.geojson.GeometryCollection (common, jvm) io.github.dellisd.spatialk.geojson.LineString (common, jvm) io.github.dellisd.spatialk.geojson.MultiLineString (common, jvm) io.github.dellisd.spatialk.geojson.MultiPoint (common, jvm) io.github.dellisd.spatialk.geojson.MultiPolygon (common, jvm) io.github.dellisd.spatialk.geojson.Point (common, jvm) io.github.dellisd.spatialk.geojson.Polygon Properties Name Summary (common, jvm, native) AREA_EARTH_RADIUS const val AREA_EARTH_RADIUS: Int (common, jvm, native) EARTH_RADIUS Radius of the Earth used with the Harvesine formula. Approximated using a spherical (non-ellipsoid) Earth. const val EARTH_RADIUS: Double Functions Name Summary along (native) Takes a LineString and returns a position at a specified distance along the line. fun along(line: <ERROR CLASS>, distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> (common, jvm) Takes a LineString and returns a position at a specified distance along the line. fun along(line: LineString, distance: Double , units: Units = Units.Kilometers): Position area Takes a geometry and returns its area in square meters.(native) fun area(geometry: <ERROR CLASS>): Double (common, jvm) fun area(geometry: Geometry): Double bbox Takes a geometry and calculates the bbox of all input features, and returns a bounding box.(native) fun bbox(geometry: <ERROR CLASS>): <ERROR CLASS> (common, jvm) fun bbox(geometry: Geometry): BoundingBox (common, jvm) fun bbox(geometry: Point): BoundingBox (common, jvm) fun bbox(geometry: MultiPoint): BoundingBox (common, jvm) fun bbox(geometry: LineString): BoundingBox (common, jvm) fun bbox(geometry: MultiLineString): BoundingBox (common, jvm) fun bbox(geometry: Polygon): BoundingBox (common, jvm) fun bbox(geometry: MultiPolygon): BoundingBox Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box.(common, jvm) fun bbox(feature: Feature): BoundingBox? Takes a feature collection and calculates a bbox that covers all features in the collection.(common, jvm) fun bbox(featureCollection: FeatureCollection): BoundingBox bboxPolygon (native) Takes a bbox and returns an equivalent Polygon . fun bboxPolygon(bbox: <ERROR CLASS>): <ERROR CLASS> (common, jvm) Takes a bbox and returns an equivalent Polygon . fun bboxPolygon(bbox: BoundingBox): Polygon bearing Takes two positions ( start ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees)(native) fun bearing(start: <ERROR CLASS>, end: <ERROR CLASS>, final: Boolean = false): Double (common, jvm) fun bearing(start: Position, end: Position, final: Boolean = false): Double (common, jvm, native) convertArea Converts an area to the requested unit. Valid units: Acres , Miles , Inches , Yards , Meters , Kilometers , Centimeters , Feet fun convertArea(area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double (common, jvm, native) convertLength Converts a length to the requested unit fun convertLength(length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double (native) coordAll fun <ERROR CLASS>.coordAll(): List <<ERROR CLASS>> destination Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.(native) fun destination(origin: <ERROR CLASS>, distance: Double , bearing: Double , units: Units = Units.Kilometers): <ERROR CLASS> (common, jvm) fun destination(origin: Position, distance: Double , bearing: Double , units: Units = Units.Kilometers): Position distance Calculates the distance between two positions. This uses the Haversine formula to account for global curvature.(native) fun distance(from: <ERROR CLASS>, to: <ERROR CLASS>, units: Units = Units.Kilometers): Double (common, jvm) fun distance(from: Position, to: Position, units: Units = Units.Kilometers): Double length (native) Calculates the length of the given LineString in the given Units . fun length(lineString: <ERROR CLASS>, units: Units ): Double (common, jvm) Calculates the length of the given LineString in the given Units . fun length(lineString: LineString, units: Units ): Double (common, jvm) Calculates the combined length of all LineString s from the given MultiLineString in the given Units . fun length(multiLineString: MultiLineString, units: Units ): Double (common, jvm) Calculates the length of perimeter the given Polygon in the given Units . Any holes in the polygon will be included in the length. fun length(polygon: Polygon, units: Units ): Double (common, jvm) Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . Any holes in the polygons will be included in the length. fun length(multiPolygon: MultiPolygon, units: Units ): Double lengthToDegrees Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees.(common, jvm) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): Double (native) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> (common, jvm, native) lengthToRadians Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians. fun lengthToRadians(distance: Double , units: Units = Units.Kilometers): Double lineIntersect (native) Returns intersecting points between two LineString s. fun lineIntersect(line1: <ERROR CLASS>, line2: <ERROR CLASS>): List <<ERROR CLASS>> (common, jvm) Returns intersecting points between two LineString s. fun lineIntersect(line1: LineString, line2: LineString): List <Position> lineSlice (native) Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. fun lineSlice(start: <ERROR CLASS>, stop: <ERROR CLASS>, line: <ERROR CLASS>): <ERROR CLASS> (common, jvm) Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. fun lineSlice(start: Position, stop: Position, line: LineString): LineString midpoint (native) Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. fun midpoint(point1: <ERROR CLASS>, point2: <ERROR CLASS>): <ERROR CLASS> (common, jvm) Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. fun midpoint(point1: Position, point2: Position): Position nearestPointOnLine (native) Finds the closest Position along a LineString to a given position fun nearestPointOnLine(line: <ERROR CLASS>, point: <ERROR CLASS>, units: Units = Units.Kilometers): NearestPointOnLineResult (common, jvm) Finds the closest Position along a LineString to a given position fun nearestPointOnLine(line: LineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult (common, jvm) Finds the closest Position along a MultiLineString to a given position fun nearestPointOnLine(lines: MultiLineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult (common, jvm, native) radiansToLength Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit. fun radiansToLength(radians: Double , units: Units = Units.Kilometers): Double (native) toPolygon fun <ERROR CLASS>.toPolygon(): <ERROR CLASS>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/#package-iogithubdellisdspatialkturf","text":"","title":"Package io.github.dellisd.spatialk.turf"},{"location":"api/turf/io.github.dellisd.spatialk.turf/#types","text":"Name Summary (common, jvm, native) NearestPointOnLineResult Result values from nearestPointOnLine . data class NearestPointOnLineResult (common, jvm, native) Units Supported units of measurement in Turf. enum class Units","title":"Types"},{"location":"api/turf/io.github.dellisd.spatialk.turf/#extensions-for-external-classes","text":"Name Summary (common, jvm) io.github.dellisd.spatialk.geojson.BoundingBox (common, jvm) io.github.dellisd.spatialk.geojson.Feature (common, jvm) io.github.dellisd.spatialk.geojson.FeatureCollection (common, jvm) io.github.dellisd.spatialk.geojson.Geometry (common, jvm) io.github.dellisd.spatialk.geojson.GeometryCollection (common, jvm) io.github.dellisd.spatialk.geojson.LineString (common, jvm) io.github.dellisd.spatialk.geojson.MultiLineString (common, jvm) io.github.dellisd.spatialk.geojson.MultiPoint (common, jvm) io.github.dellisd.spatialk.geojson.MultiPolygon (common, jvm) io.github.dellisd.spatialk.geojson.Point (common, jvm) io.github.dellisd.spatialk.geojson.Polygon","title":"Extensions for External Classes"},{"location":"api/turf/io.github.dellisd.spatialk.turf/#properties","text":"Name Summary (common, jvm, native) AREA_EARTH_RADIUS const val AREA_EARTH_RADIUS: Int (common, jvm, native) EARTH_RADIUS Radius of the Earth used with the Harvesine formula. Approximated using a spherical (non-ellipsoid) Earth. const val EARTH_RADIUS: Double","title":"Properties"},{"location":"api/turf/io.github.dellisd.spatialk.turf/#functions","text":"Name Summary along (native) Takes a LineString and returns a position at a specified distance along the line. fun along(line: <ERROR CLASS>, distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> (common, jvm) Takes a LineString and returns a position at a specified distance along the line. fun along(line: LineString, distance: Double , units: Units = Units.Kilometers): Position area Takes a geometry and returns its area in square meters.(native) fun area(geometry: <ERROR CLASS>): Double (common, jvm) fun area(geometry: Geometry): Double bbox Takes a geometry and calculates the bbox of all input features, and returns a bounding box.(native) fun bbox(geometry: <ERROR CLASS>): <ERROR CLASS> (common, jvm) fun bbox(geometry: Geometry): BoundingBox (common, jvm) fun bbox(geometry: Point): BoundingBox (common, jvm) fun bbox(geometry: MultiPoint): BoundingBox (common, jvm) fun bbox(geometry: LineString): BoundingBox (common, jvm) fun bbox(geometry: MultiLineString): BoundingBox (common, jvm) fun bbox(geometry: Polygon): BoundingBox (common, jvm) fun bbox(geometry: MultiPolygon): BoundingBox Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box.(common, jvm) fun bbox(feature: Feature): BoundingBox? Takes a feature collection and calculates a bbox that covers all features in the collection.(common, jvm) fun bbox(featureCollection: FeatureCollection): BoundingBox bboxPolygon (native) Takes a bbox and returns an equivalent Polygon . fun bboxPolygon(bbox: <ERROR CLASS>): <ERROR CLASS> (common, jvm) Takes a bbox and returns an equivalent Polygon . fun bboxPolygon(bbox: BoundingBox): Polygon bearing Takes two positions ( start ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees)(native) fun bearing(start: <ERROR CLASS>, end: <ERROR CLASS>, final: Boolean = false): Double (common, jvm) fun bearing(start: Position, end: Position, final: Boolean = false): Double (common, jvm, native) convertArea Converts an area to the requested unit. Valid units: Acres , Miles , Inches , Yards , Meters , Kilometers , Centimeters , Feet fun convertArea(area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double (common, jvm, native) convertLength Converts a length to the requested unit fun convertLength(length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double (native) coordAll fun <ERROR CLASS>.coordAll(): List <<ERROR CLASS>> destination Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.(native) fun destination(origin: <ERROR CLASS>, distance: Double , bearing: Double , units: Units = Units.Kilometers): <ERROR CLASS> (common, jvm) fun destination(origin: Position, distance: Double , bearing: Double , units: Units = Units.Kilometers): Position distance Calculates the distance between two positions. This uses the Haversine formula to account for global curvature.(native) fun distance(from: <ERROR CLASS>, to: <ERROR CLASS>, units: Units = Units.Kilometers): Double (common, jvm) fun distance(from: Position, to: Position, units: Units = Units.Kilometers): Double length (native) Calculates the length of the given LineString in the given Units . fun length(lineString: <ERROR CLASS>, units: Units ): Double (common, jvm) Calculates the length of the given LineString in the given Units . fun length(lineString: LineString, units: Units ): Double (common, jvm) Calculates the combined length of all LineString s from the given MultiLineString in the given Units . fun length(multiLineString: MultiLineString, units: Units ): Double (common, jvm) Calculates the length of perimeter the given Polygon in the given Units . Any holes in the polygon will be included in the length. fun length(polygon: Polygon, units: Units ): Double (common, jvm) Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . Any holes in the polygons will be included in the length. fun length(multiPolygon: MultiPolygon, units: Units ): Double lengthToDegrees Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees.(common, jvm) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): Double (native) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> (common, jvm, native) lengthToRadians Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians. fun lengthToRadians(distance: Double , units: Units = Units.Kilometers): Double lineIntersect (native) Returns intersecting points between two LineString s. fun lineIntersect(line1: <ERROR CLASS>, line2: <ERROR CLASS>): List <<ERROR CLASS>> (common, jvm) Returns intersecting points between two LineString s. fun lineIntersect(line1: LineString, line2: LineString): List <Position> lineSlice (native) Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. fun lineSlice(start: <ERROR CLASS>, stop: <ERROR CLASS>, line: <ERROR CLASS>): <ERROR CLASS> (common, jvm) Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. fun lineSlice(start: Position, stop: Position, line: LineString): LineString midpoint (native) Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. fun midpoint(point1: <ERROR CLASS>, point2: <ERROR CLASS>): <ERROR CLASS> (common, jvm) Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. fun midpoint(point1: Position, point2: Position): Position nearestPointOnLine (native) Finds the closest Position along a LineString to a given position fun nearestPointOnLine(line: <ERROR CLASS>, point: <ERROR CLASS>, units: Units = Units.Kilometers): NearestPointOnLineResult (common, jvm) Finds the closest Position along a LineString to a given position fun nearestPointOnLine(line: LineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult (common, jvm) Finds the closest Position along a MultiLineString to a given position fun nearestPointOnLine(lines: MultiLineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult (common, jvm, native) radiansToLength Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit. fun radiansToLength(radians: Double , units: Units = Units.Kilometers): Double (native) toPolygon fun <ERROR CLASS>.toPolygon(): <ERROR CLASS>","title":"Functions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-a-r-e-a_-e-a-r-t-h_-r-a-d-i-u-s/","text":"turf / io.github.dellisd.spatialk.turf / AREA_EARTH_RADIUS AREA_EARTH_RADIUS (common, jvm, native) const val AREA_EARTH_RADIUS: Int","title":" a r e a  e a r t h  r a d i u s"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-a-r-e-a_-e-a-r-t-h_-r-a-d-i-u-s/#area_earth_radius","text":"(common, jvm, native) const val AREA_EARTH_RADIUS: Int","title":"AREA_EARTH_RADIUS"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-e-a-r-t-h_-r-a-d-i-u-s/","text":"turf / io.github.dellisd.spatialk.turf / EARTH_RADIUS EARTH_RADIUS (common, jvm, native) const val EARTH_RADIUS: Double Radius of the Earth used with the Harvesine formula. Approximated using a spherical (non-ellipsoid) Earth.","title":" e a r t h  r a d i u s"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-e-a-r-t-h_-r-a-d-i-u-s/#earth_radius","text":"(common, jvm, native) const val EARTH_RADIUS: Double Radius of the Earth used with the Harvesine formula. Approximated using a spherical (non-ellipsoid) Earth.","title":"EARTH_RADIUS"},{"location":"api/turf/io.github.dellisd.spatialk.turf/along/","text":"turf / io.github.dellisd.spatialk.turf / along along (common, jvm) @JvmOverloads fun along(line: LineString, distance: Double , units: Units = Units.Kilometers): Position Takes a LineString and returns a position at a specified distance along the line. Parameters line - input line distance - distance along the line units - units of distance Return A position distance along the line (native) fun along(line: <ERROR CLASS>, distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> Takes a LineString and returns a position at a specified distance along the line. Parameters line - input line distance - distance along the line units - units of distance Return A position distance along the line","title":"Along"},{"location":"api/turf/io.github.dellisd.spatialk.turf/along/#along","text":"(common, jvm) @JvmOverloads fun along(line: LineString, distance: Double , units: Units = Units.Kilometers): Position Takes a LineString and returns a position at a specified distance along the line.","title":"along"},{"location":"api/turf/io.github.dellisd.spatialk.turf/along/#parameters","text":"line - input line distance - distance along the line units - units of distance Return A position distance along the line (native) fun along(line: <ERROR CLASS>, distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> Takes a LineString and returns a position at a specified distance along the line.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/along/#parameters_1","text":"line - input line distance - distance along the line units - units of distance Return A position distance along the line","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/area/","text":"turf / io.github.dellisd.spatialk.turf / area area (common, jvm) fun area(geometry: Geometry): Double Takes a geometry and returns its area in square meters. Parameters geometry - input geometry Return area in square meters (native) fun area(geometry: <ERROR CLASS>): Double Takes a geometry and returns its area in square meters. Parameters geometry - input geometry Return area in square meters","title":"Area"},{"location":"api/turf/io.github.dellisd.spatialk.turf/area/#area","text":"(common, jvm) fun area(geometry: Geometry): Double Takes a geometry and returns its area in square meters.","title":"area"},{"location":"api/turf/io.github.dellisd.spatialk.turf/area/#parameters","text":"geometry - input geometry Return area in square meters (native) fun area(geometry: <ERROR CLASS>): Double Takes a geometry and returns its area in square meters.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/area/#parameters_1","text":"geometry - input geometry Return area in square meters","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox-polygon/","text":"turf / io.github.dellisd.spatialk.turf / bboxPolygon bboxPolygon (common, jvm) fun bboxPolygon(bbox: BoundingBox): Polygon Takes a bbox and returns an equivalent Polygon . Parameters bbox - The bounding box to convert to a Polygon. See Also BoundingBox.toPolygon Return The bounding box as a polygon (native) fun bboxPolygon(bbox: <ERROR CLASS>): <ERROR CLASS> Takes a bbox and returns an equivalent Polygon . Parameters bbox - The bounding box to convert to a Polygon. See Also BoundingBox.toPolygon Return The bounding box as a polygon","title":"Bbox polygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#bboxpolygon","text":"(common, jvm) fun bboxPolygon(bbox: BoundingBox): Polygon Takes a bbox and returns an equivalent Polygon .","title":"bboxPolygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#parameters","text":"bbox - The bounding box to convert to a Polygon. See Also BoundingBox.toPolygon Return The bounding box as a polygon (native) fun bboxPolygon(bbox: <ERROR CLASS>): <ERROR CLASS> Takes a bbox and returns an equivalent Polygon .","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox-polygon/#parameters_1","text":"bbox - The bounding box to convert to a Polygon. See Also BoundingBox.toPolygon Return The bounding box as a polygon","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox/","text":"turf / io.github.dellisd.spatialk.turf / bbox bbox (common, jvm) fun bbox(geometry: Geometry): BoundingBox fun bbox(geometry: Point): BoundingBox fun bbox(geometry: MultiPoint): BoundingBox fun bbox(geometry: LineString): BoundingBox fun bbox(geometry: MultiLineString): BoundingBox fun bbox(geometry: Polygon): BoundingBox fun bbox(geometry: MultiPolygon): BoundingBox Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Parameters geometry - The geometry to compute a bounding box for. Return A BoundingBox that covers the geometry. (common, jvm) fun bbox(feature: Feature): BoundingBox? Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box. Parameters feature - The feature to compute a bounding box for. Return A BoundingBox that covers the geometry. (common, jvm) fun bbox(featureCollection: FeatureCollection): BoundingBox Takes a feature collection and calculates a bbox that covers all features in the collection. Parameters featureCollection - The collection of features to compute a bounding box for. Return A BoundingBox that covers the geometry. (native) fun bbox(geometry: <ERROR CLASS>): <ERROR CLASS> Takes a geometry and calculates the bbox of all input features, and returns a bounding box. Parameters geometry - The geometry to compute a bounding box for. Return A BoundingBox that covers the geometry.","title":"Bbox"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox/#bbox","text":"(common, jvm) fun bbox(geometry: Geometry): BoundingBox fun bbox(geometry: Point): BoundingBox fun bbox(geometry: MultiPoint): BoundingBox fun bbox(geometry: LineString): BoundingBox fun bbox(geometry: MultiLineString): BoundingBox fun bbox(geometry: Polygon): BoundingBox fun bbox(geometry: MultiPolygon): BoundingBox Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"bbox"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox/#parameters","text":"geometry - The geometry to compute a bounding box for. Return A BoundingBox that covers the geometry. (common, jvm) fun bbox(feature: Feature): BoundingBox? Takes a feature and calculates the bbox of the feature's geometry, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_1","text":"feature - The feature to compute a bounding box for. Return A BoundingBox that covers the geometry. (common, jvm) fun bbox(featureCollection: FeatureCollection): BoundingBox Takes a feature collection and calculates a bbox that covers all features in the collection.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_2","text":"featureCollection - The collection of features to compute a bounding box for. Return A BoundingBox that covers the geometry. (native) fun bbox(geometry: <ERROR CLASS>): <ERROR CLASS> Takes a geometry and calculates the bbox of all input features, and returns a bounding box.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bbox/#parameters_3","text":"geometry - The geometry to compute a bounding box for. Return A BoundingBox that covers the geometry.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bearing/","text":"turf / io.github.dellisd.spatialk.turf / bearing bearing (common, jvm) @JvmOverloads fun bearing(start: Position, end: Position, final: Boolean = false): Double Takes two positions ( start ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees) Parameters start - starting point end - ending point final - calculates the final bearing if true Return bearing in decimal degrees, between -180 and 180 degrees (positive clockwise) (native) fun bearing(start: <ERROR CLASS>, end: <ERROR CLASS>, final: Boolean = false): Double Takes two positions ( start ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees) Parameters start - starting point end - ending point final - calculates the final bearing if true Return bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)","title":"Bearing"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bearing/#bearing","text":"(common, jvm) @JvmOverloads fun bearing(start: Position, end: Position, final: Boolean = false): Double Takes two positions ( start ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees)","title":"bearing"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bearing/#parameters","text":"start - starting point end - ending point final - calculates the final bearing if true Return bearing in decimal degrees, between -180 and 180 degrees (positive clockwise) (native) fun bearing(start: <ERROR CLASS>, end: <ERROR CLASS>, final: Boolean = false): Double Takes two positions ( start ) and finds the geographic bearing between them, i.e. the angle measured in degrees from the north line (0 degrees)","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/bearing/#parameters_1","text":"start - starting point end - ending point final - calculates the final bearing if true Return bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-area/","text":"turf / io.github.dellisd.spatialk.turf / convertArea convertArea (common, jvm, native) fun convertArea(area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double Converts an area to the requested unit. Valid units: Acres , Miles , Inches , Yards , Meters , Kilometers , Centimeters , Feet Parameters area - Area to be converted from - Original units of the area to - Units to convert the area to Exceptions IllegalArgumentException - if the given units are invalid, or if the area is negative Return the converted area","title":"Convert area"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-area/#convertarea","text":"(common, jvm, native) fun convertArea(area: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double Converts an area to the requested unit. Valid units: Acres , Miles , Inches , Yards , Meters , Kilometers , Centimeters , Feet","title":"convertArea"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-area/#parameters","text":"area - Area to be converted from - Original units of the area to - Units to convert the area to","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-area/#exceptions","text":"IllegalArgumentException - if the given units are invalid, or if the area is negative Return the converted area","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-length/","text":"turf / io.github.dellisd.spatialk.turf / convertLength convertLength (common, jvm, native) fun convertLength(length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double Converts a length to the requested unit Parameters length - Length to be converted from - Unit of the length to - Unit to convert the length to Exceptions IllegalArgumentException - if the given length is negative Returns The converted length","title":"Convert length"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-length/#convertlength","text":"(common, jvm, native) fun convertLength(length: Double , from: Units = Units.Meters, to: Units = Units.Kilometers): Double Converts a length to the requested unit","title":"convertLength"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-length/#parameters","text":"length - Length to be converted from - Unit of the length to - Unit to convert the length to","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/convert-length/#exceptions","text":"IllegalArgumentException - if the given length is negative Returns The converted length","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / coordAll coordAll (native) fun <ERROR CLASS>.coordAll(): List <<ERROR CLASS>>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/coord-all/#coordall","text":"(native) fun <ERROR CLASS>.coordAll(): List <<ERROR CLASS>>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/destination/","text":"turf / io.github.dellisd.spatialk.turf / destination destination (common, jvm) @JvmOverloads fun destination(origin: Position, distance: Double , bearing: Double , units: Units = Units.Kilometers): Position Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature. Parameters origin - starting point distance - distance from the origin point bearing - ranging from -180 to 180 units - Unit of distance Return destination position (native) fun destination(origin: <ERROR CLASS>, distance: Double , bearing: Double , units: Units = Units.Kilometers): <ERROR CLASS> Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature. Parameters origin - starting point distance - distance from the origin point bearing - ranging from -180 to 180 units - Unit of distance Return destination position","title":"Destination"},{"location":"api/turf/io.github.dellisd.spatialk.turf/destination/#destination","text":"(common, jvm) @JvmOverloads fun destination(origin: Position, distance: Double , bearing: Double , units: Units = Units.Kilometers): Position Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.","title":"destination"},{"location":"api/turf/io.github.dellisd.spatialk.turf/destination/#parameters","text":"origin - starting point distance - distance from the origin point bearing - ranging from -180 to 180 units - Unit of distance Return destination position (native) fun destination(origin: <ERROR CLASS>, distance: Double , bearing: Double , units: Units = Units.Kilometers): <ERROR CLASS> Takes a position and calculates the location of a destination position given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/destination/#parameters_1","text":"origin - starting point distance - distance from the origin point bearing - ranging from -180 to 180 units - Unit of distance Return destination position","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/distance/","text":"turf / io.github.dellisd.spatialk.turf / distance distance (common, jvm) @JvmOverloads fun distance(from: Position, to: Position, units: Units = Units.Kilometers): Double Calculates the distance between two positions. This uses the Haversine formula to account for global curvature. Parameters from - origin point to - destination point units - units of returned distance Return distance between the two points in units (native) fun distance(from: <ERROR CLASS>, to: <ERROR CLASS>, units: Units = Units.Kilometers): Double Calculates the distance between two positions. This uses the Haversine formula to account for global curvature. Parameters from - origin point to - destination point units - units of returned distance Return distance between the two points in units","title":"Distance"},{"location":"api/turf/io.github.dellisd.spatialk.turf/distance/#distance","text":"(common, jvm) @JvmOverloads fun distance(from: Position, to: Position, units: Units = Units.Kilometers): Double Calculates the distance between two positions. This uses the Haversine formula to account for global curvature.","title":"distance"},{"location":"api/turf/io.github.dellisd.spatialk.turf/distance/#parameters","text":"from - origin point to - destination point units - units of returned distance Return distance between the two points in units (native) fun distance(from: <ERROR CLASS>, to: <ERROR CLASS>, units: Units = Units.Kilometers): Double Calculates the distance between two positions. This uses the Haversine formula to account for global curvature.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/distance/#parameters_1","text":"from - origin point to - destination point units - units of returned distance Return distance between the two points in units","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-degrees/","text":"turf / io.github.dellisd.spatialk.turf / lengthToDegrees lengthToDegrees (common, jvm) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): Double (native) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees. Parameters distance - Distance in real units units - Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians Exceptions IllegalArgumentException - if the given units are invalid Return Degrees","title":"Length to degrees"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#lengthtodegrees","text":"(common, jvm) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): Double (native) fun lengthToDegrees(distance: Double , units: Units = Units.Kilometers): <ERROR CLASS> Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees.","title":"lengthToDegrees"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#parameters","text":"distance - Distance in real units units - Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-degrees/#exceptions","text":"IllegalArgumentException - if the given units are invalid Return Degrees","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-radians/","text":"turf / io.github.dellisd.spatialk.turf / lengthToRadians lengthToRadians (common, jvm, native) fun lengthToRadians(distance: Double , units: Units = Units.Kilometers): Double Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians. Parameters distance - Distance in real units units - Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians Exceptions IllegalArgumentException - if the given units are invalid Return Radians","title":"Length to radians"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-radians/#lengthtoradians","text":"(common, jvm, native) fun lengthToRadians(distance: Double , units: Units = Units.Kilometers): Double Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians.","title":"lengthToRadians"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-radians/#parameters","text":"distance - Distance in real units units - Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length-to-radians/#exceptions","text":"IllegalArgumentException - if the given units are invalid Return Radians","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/","text":"turf / io.github.dellisd.spatialk.turf / length length (common, jvm) fun length(lineString: LineString, units: Units ): Double Calculates the length of the given LineString in the given Units . Parameters lineString - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (common, jvm) fun length(multiLineString: MultiLineString, units: Units ): Double Calculates the combined length of all LineString s from the given MultiLineString in the given Units . Parameters multiLineString - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (common, jvm) fun length(polygon: Polygon, units: Units ): Double Calculates the length of perimeter the given Polygon in the given Units . Any holes in the polygon will be included in the length. Parameters polygon - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (common, jvm) fun length(multiPolygon: MultiPolygon, units: Units ): Double Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . Any holes in the polygons will be included in the length. Parameters multiPolygon - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (native) fun length(lineString: <ERROR CLASS>, units: Units ): Double Calculates the length of the given LineString in the given Units . Parameters lineString - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units .","title":"Length"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/#length","text":"(common, jvm) fun length(lineString: LineString, units: Units ): Double Calculates the length of the given LineString in the given Units .","title":"length"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/#parameters","text":"lineString - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (common, jvm) fun length(multiLineString: MultiLineString, units: Units ): Double Calculates the combined length of all LineString s from the given MultiLineString in the given Units .","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/#parameters_1","text":"multiLineString - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (common, jvm) fun length(polygon: Polygon, units: Units ): Double Calculates the length of perimeter the given Polygon in the given Units . Any holes in the polygon will be included in the length.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/#parameters_2","text":"polygon - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (common, jvm) fun length(multiPolygon: MultiPolygon, units: Units ): Double Calculates the combined length of perimeter the Polygon s in the MultiPolygon in the given Units . Any holes in the polygons will be included in the length.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/#parameters_3","text":"multiPolygon - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units . (native) fun length(lineString: <ERROR CLASS>, units: Units ): Double Calculates the length of the given LineString in the given Units .","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/length/#parameters_4","text":"lineString - The geometry to measure units - The unit of measurement to return the length in Return The length of the geometry in units .","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-intersect/","text":"turf / io.github.dellisd.spatialk.turf / lineIntersect lineIntersect (common, jvm) fun lineIntersect(line1: LineString, line2: LineString): List <Position> Returns intersecting points between two LineString s. Currently only supports primitive LineStrings containing exactly two points each! Exceptions NotImplementedError - if either LineString does not contain exactly two points Return A list containing any intersections between line1 (native) fun lineIntersect(line1: <ERROR CLASS>, line2: <ERROR CLASS>): List <<ERROR CLASS>> Returns intersecting points between two LineString s. Currently only supports primitive LineStrings containing exactly two points each! Exceptions NotImplementedError - if either LineString does not contain exactly two points Return A list containing any intersections between line1","title":"Line intersect"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-intersect/#lineintersect","text":"(common, jvm) fun lineIntersect(line1: LineString, line2: LineString): List <Position> Returns intersecting points between two LineString s. Currently only supports primitive LineStrings containing exactly two points each!","title":"lineIntersect"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-intersect/#exceptions","text":"NotImplementedError - if either LineString does not contain exactly two points Return A list containing any intersections between line1 (native) fun lineIntersect(line1: <ERROR CLASS>, line2: <ERROR CLASS>): List <<ERROR CLASS>> Returns intersecting points between two LineString s. Currently only supports primitive LineStrings containing exactly two points each!","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-intersect/#exceptions_1","text":"NotImplementedError - if either LineString does not contain exactly two points Return A list containing any intersections between line1","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-slice/","text":"turf / io.github.dellisd.spatialk.turf / lineSlice lineSlice (common, jvm) fun lineSlice(start: Position, stop: Position, line: LineString): LineString Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. Parameters start - Start position stop - Stop position line - The line string to slice Return The sliced subsection of the line (native) fun lineSlice(start: <ERROR CLASS>, stop: <ERROR CLASS>, line: <ERROR CLASS>): <ERROR CLASS> Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line. Parameters start - Start position stop - Stop position line - The line string to slice Return The sliced subsection of the line","title":"Line slice"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-slice/#lineslice","text":"(common, jvm) fun lineSlice(start: Position, stop: Position, line: LineString): LineString Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line.","title":"lineSlice"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-slice/#parameters","text":"start - Start position stop - Stop position line - The line string to slice Return The sliced subsection of the line (native) fun lineSlice(start: <ERROR CLASS>, stop: <ERROR CLASS>, line: <ERROR CLASS>): <ERROR CLASS> Takes a LineString , a start and a stop Position and returns a subsection of the line between those points. The start and stop points do not need to fall exactly on the line.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/line-slice/#parameters_1","text":"start - Start position stop - Stop position line - The line string to slice Return The sliced subsection of the line","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/midpoint/","text":"turf / io.github.dellisd.spatialk.turf / midpoint midpoint (common, jvm) fun midpoint(point1: Position, point2: Position): Position Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. Parameters point1 - the first point point2 - the second point Return A Position midway between point1 (native) fun midpoint(point1: <ERROR CLASS>, point2: <ERROR CLASS>): <ERROR CLASS> Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account. Parameters point1 - the first point point2 - the second point Return A Position midway between point1","title":"Midpoint"},{"location":"api/turf/io.github.dellisd.spatialk.turf/midpoint/#midpoint","text":"(common, jvm) fun midpoint(point1: Position, point2: Position): Position Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.","title":"midpoint"},{"location":"api/turf/io.github.dellisd.spatialk.turf/midpoint/#parameters","text":"point1 - the first point point2 - the second point Return A Position midway between point1 (native) fun midpoint(point1: <ERROR CLASS>, point2: <ERROR CLASS>): <ERROR CLASS> Takes two Position s and returns a point midway between them. The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/midpoint/#parameters_1","text":"point1 - the first point point2 - the second point Return A Position midway between point1","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/","text":"turf / io.github.dellisd.spatialk.turf / nearestPointOnLine nearestPointOnLine (common, jvm) fun nearestPointOnLine(line: LineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult Finds the closest Position along a LineString to a given position Parameters line - The LineString to find a position along point - The Position given to find the closest point along the line Return The closest position along the line (common, jvm) fun nearestPointOnLine(lines: MultiLineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult Finds the closest Position along a MultiLineString to a given position Parameters lines - The MultiLineString to find a position along point - The Position given to find the closest point along the lines Return The closest position along the lines (native) fun nearestPointOnLine(line: <ERROR CLASS>, point: <ERROR CLASS>, units: Units = Units.Kilometers): NearestPointOnLineResult Finds the closest Position along a LineString to a given position Parameters line - The LineString to find a position along point - The Position given to find the closest point along the line Return The closest position along the line","title":"Nearest point on line"},{"location":"api/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#nearestpointonline","text":"(common, jvm) fun nearestPointOnLine(line: LineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult Finds the closest Position along a LineString to a given position","title":"nearestPointOnLine"},{"location":"api/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#parameters","text":"line - The LineString to find a position along point - The Position given to find the closest point along the line Return The closest position along the line (common, jvm) fun nearestPointOnLine(lines: MultiLineString, point: Position, units: Units = Units.Kilometers): NearestPointOnLineResult Finds the closest Position along a MultiLineString to a given position","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#parameters_1","text":"lines - The MultiLineString to find a position along point - The Position given to find the closest point along the lines Return The closest position along the lines (native) fun nearestPointOnLine(line: <ERROR CLASS>, point: <ERROR CLASS>, units: Units = Units.Kilometers): NearestPointOnLineResult Finds the closest Position along a LineString to a given position","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/nearest-point-on-line/#parameters_2","text":"line - The LineString to find a position along point - The Position given to find the closest point along the line Return The closest position along the line","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/radians-to-length/","text":"turf / io.github.dellisd.spatialk.turf / radiansToLength radiansToLength (common, jvm, native) fun radiansToLength(radians: Double , units: Units = Units.Kilometers): Double Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit. Parameters radians - Radians in radians across the sphere units - Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians Exceptions IllegalArgumentException - if the given units are invalid Return Distance","title":"Radians to length"},{"location":"api/turf/io.github.dellisd.spatialk.turf/radians-to-length/#radianstolength","text":"(common, jvm, native) fun radiansToLength(radians: Double , units: Units = Units.Kilometers): Double Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.","title":"radiansToLength"},{"location":"api/turf/io.github.dellisd.spatialk.turf/radians-to-length/#parameters","text":"radians - Radians in radians across the sphere units - Can be Miles , NauticalMiles , Inches , Yards , Meters , Kilometers , Centimeters , Feet , Degrees , Radians","title":"Parameters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/radians-to-length/#exceptions","text":"IllegalArgumentException - if the given units are invalid Return Distance","title":"Exceptions"},{"location":"api/turf/io.github.dellisd.spatialk.turf/to-polygon/","text":"turf / io.github.dellisd.spatialk.turf / toPolygon toPolygon (native) fun <ERROR CLASS>.toPolygon(): <ERROR CLASS>","title":"To polygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/to-polygon/#topolygon","text":"(native) fun <ERROR CLASS>.toPolygon(): <ERROR CLASS>","title":"toPolygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/","text":"turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult NearestPointOnLineResult (common, jvm, native) data class NearestPointOnLineResult Result values from nearestPointOnLine . Constructors Name Summary <init> Result values from nearestPointOnLine .(native) NearestPointOnLineResult(point: <ERROR CLASS>, distance: Double , location: Double , index: Int ) (common, jvm) <init>(point: Position, distance: Double , location: Double , index: Int ) Properties Name Summary (common, jvm, native) distance Distance between the input position and point val distance: Double (common, jvm, native) index Index of the segment of the line on which point lies. val index: Int (common, jvm, native) location Distance along the line from the stat to the point val location: Double point The point on the line nearest to the input position(common, jvm) val point: Position (native) val point: <ERROR CLASS>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/#nearestpointonlineresult","text":"(common, jvm, native) data class NearestPointOnLineResult Result values from nearestPointOnLine .","title":"NearestPointOnLineResult"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/#constructors","text":"Name Summary <init> Result values from nearestPointOnLine .(native) NearestPointOnLineResult(point: <ERROR CLASS>, distance: Double , location: Double , index: Int ) (common, jvm) <init>(point: Position, distance: Double , location: Double , index: Int )","title":"Constructors"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/#properties","text":"Name Summary (common, jvm, native) distance Distance between the input position and point val distance: Double (common, jvm, native) index Index of the segment of the line on which point lies. val index: Int (common, jvm, native) location Distance along the line from the stat to the point val location: Double point The point on the line nearest to the input position(common, jvm) val point: Position (native) val point: <ERROR CLASS>","title":"Properties"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/--index--/","text":"turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / index index (common, jvm, native) val index: Int Index of the segment of the line on which point lies. Property index - Index of the segment of the line on which point lies.","title":"  index  "},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/--index--/#index","text":"(common, jvm, native) val index: Int Index of the segment of the line on which point lies.","title":"index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/--index--/#property","text":"index - Index of the segment of the line on which point lies.","title":"Property"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/-init-/","text":"turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / <init> <init> (common, jvm) <init>(point: Position, distance: Double , location: Double , index: Int ) Result values from nearestPointOnLine . (native) NearestPointOnLineResult(point: <ERROR CLASS>, distance: Double , location: Double , index: Int ) Result values from nearestPointOnLine .","title":" init "},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/-init-/#init","text":"(common, jvm) <init>(point: Position, distance: Double , location: Double , index: Int ) Result values from nearestPointOnLine . (native) NearestPointOnLineResult(point: <ERROR CLASS>, distance: Double , location: Double , index: Int ) Result values from nearestPointOnLine .","title":"&lt;init&gt;"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/distance/","text":"turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / distance distance (common, jvm, native) val distance: Double Distance between the input position and point Property distance - Distance between the input position and point","title":"Distance"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/distance/#distance","text":"(common, jvm, native) val distance: Double Distance between the input position and point","title":"distance"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/distance/#property","text":"distance - Distance between the input position and point","title":"Property"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/location/","text":"turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / location location (common, jvm, native) val location: Double Distance along the line from the stat to the point Property location - Distance along the line from the stat to the point","title":"Location"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/location/#location","text":"(common, jvm, native) val location: Double Distance along the line from the stat to the point","title":"location"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/location/#property","text":"location - Distance along the line from the stat to the point","title":"Property"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/point/","text":"turf / io.github.dellisd.spatialk.turf / NearestPointOnLineResult / point point (common, jvm) val point: Position (native) val point: <ERROR CLASS> The point on the line nearest to the input position Property point - The point on the line nearest to the input position","title":"Point"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/point/#point","text":"(common, jvm) val point: Position (native) val point: <ERROR CLASS> The point on the line nearest to the input position","title":"point"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-nearest-point-on-line-result/point/#property","text":"point - The point on the line nearest to the input position","title":"Property"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/","text":"turf / io.github.dellisd.spatialk.turf / Units Units (common, jvm, native) enum class Units Supported units of measurement in Turf. Enum Values Name Summary (common, jvm, native) Meters (common, jvm, native) Millimeters (common, jvm, native) Centimeters (common, jvm, native) Kilometers (common, jvm, native) Acres (common, jvm, native) Miles (common, jvm, native) NauticalMiles (common, jvm, native) Inches (common, jvm, native) Yards (common, jvm, native) Feet (common, jvm, native) Radians (common, jvm, native) Degrees Inheritors Name Summary (common, jvm, native) Acres (common, jvm, native) Centimeters (common, jvm, native) Degrees (common, jvm, native) Feet (common, jvm, native) Inches (common, jvm, native) Kilometers (common, jvm, native) Meters (common, jvm, native) Miles (common, jvm, native) Millimeters (common, jvm, native) NauticalMiles (common, jvm, native) Radians (common, jvm, native) Yards","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/#units","text":"(common, jvm, native) enum class Units Supported units of measurement in Turf.","title":"Units"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/#enum-values","text":"Name Summary (common, jvm, native) Meters (common, jvm, native) Millimeters (common, jvm, native) Centimeters (common, jvm, native) Kilometers (common, jvm, native) Acres (common, jvm, native) Miles (common, jvm, native) NauticalMiles (common, jvm, native) Inches (common, jvm, native) Yards (common, jvm, native) Feet (common, jvm, native) Radians (common, jvm, native) Degrees","title":"Enum Values"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/#inheritors","text":"Name Summary (common, jvm, native) Acres (common, jvm, native) Centimeters (common, jvm, native) Degrees (common, jvm, native) Feet (common, jvm, native) Inches (common, jvm, native) Kilometers (common, jvm, native) Meters (common, jvm, native) Miles (common, jvm, native) Millimeters (common, jvm, native) NauticalMiles (common, jvm, native) Radians (common, jvm, native) Yards","title":"Inheritors"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-acres/","text":"turf / io.github.dellisd.spatialk.turf / Units / Acres Acres (common, jvm, native) Acres","title":" acres"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-acres/#acres","text":"(common, jvm, native) Acres","title":"Acres"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/","text":"turf / io.github.dellisd.spatialk.turf / Units / Centimeters Centimeters (common, jvm, native) Centimeters","title":" centimeters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-centimeters/#centimeters","text":"(common, jvm, native) Centimeters","title":"Centimeters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-degrees/","text":"turf / io.github.dellisd.spatialk.turf / Units / Degrees Degrees (common, jvm, native) Degrees","title":" degrees"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-degrees/#degrees","text":"(common, jvm, native) Degrees","title":"Degrees"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-feet/","text":"turf / io.github.dellisd.spatialk.turf / Units / Feet Feet (common, jvm, native) Feet","title":" feet"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-feet/#feet","text":"(common, jvm, native) Feet","title":"Feet"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-inches/","text":"turf / io.github.dellisd.spatialk.turf / Units / Inches Inches (common, jvm, native) Inches","title":" inches"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-inches/#inches","text":"(common, jvm, native) Inches","title":"Inches"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/","text":"turf / io.github.dellisd.spatialk.turf / Units / Kilometers Kilometers (common, jvm, native) Kilometers","title":" kilometers"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-kilometers/#kilometers","text":"(common, jvm, native) Kilometers","title":"Kilometers"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-meters/","text":"turf / io.github.dellisd.spatialk.turf / Units / Meters Meters (common, jvm, native) Meters","title":" meters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-meters/#meters","text":"(common, jvm, native) Meters","title":"Meters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-miles/","text":"turf / io.github.dellisd.spatialk.turf / Units / Miles Miles (common, jvm, native) Miles","title":" miles"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-miles/#miles","text":"(common, jvm, native) Miles","title":"Miles"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/","text":"turf / io.github.dellisd.spatialk.turf / Units / Millimeters Millimeters (common, jvm, native) Millimeters","title":" millimeters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-millimeters/#millimeters","text":"(common, jvm, native) Millimeters","title":"Millimeters"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/","text":"turf / io.github.dellisd.spatialk.turf / Units / NauticalMiles NauticalMiles (common, jvm, native) NauticalMiles","title":" nautical miles"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-nautical-miles/#nauticalmiles","text":"(common, jvm, native) NauticalMiles","title":"NauticalMiles"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-radians/","text":"turf / io.github.dellisd.spatialk.turf / Units / Radians Radians (common, jvm, native) Radians","title":" radians"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-radians/#radians","text":"(common, jvm, native) Radians","title":"Radians"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-yards/","text":"turf / io.github.dellisd.spatialk.turf / Units / Yards Yards (common, jvm, native) Yards","title":" yards"},{"location":"api/turf/io.github.dellisd.spatialk.turf/-units/-yards/#yards","text":"(common, jvm, native) Yards","title":"Yards"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-bounding-box/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.BoundingBox Extensions for io.github.dellisd.spatialk.geojson.BoundingBox Name Summary (common, jvm) toPolygon fun BoundingBox.toPolygon(): Polygon","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-bounding-box/#extensions-for-iogithubdellisdspatialkgeojsonboundingbox","text":"Name Summary (common, jvm) toPolygon fun BoundingBox.toPolygon(): Polygon","title":"Extensions for io.github.dellisd.spatialk.geojson.BoundingBox"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-bounding-box/to-polygon/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.BoundingBox / toPolygon toPolygon (common) fun BoundingBox.toPolygon(): Polygon (jvm) fun BoundingBox.toPolygon(): Polygon","title":"To polygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-bounding-box/to-polygon/#topolygon","text":"(common) fun BoundingBox.toPolygon(): Polygon (jvm) fun BoundingBox.toPolygon(): Polygon","title":"toPolygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Feature Extensions for io.github.dellisd.spatialk.geojson.Feature Name Summary (common, jvm) coordAll fun Feature.coordAll(): List <Position>?","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature/#extensions-for-iogithubdellisdspatialkgeojsonfeature","text":"Name Summary (common, jvm) coordAll fun Feature.coordAll(): List <Position>?","title":"Extensions for io.github.dellisd.spatialk.geojson.Feature"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Feature / coordAll coordAll (common) fun Feature.coordAll(): List <Position>? (jvm) fun Feature.coordAll(): List <Position>?","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature/coord-all/#coordall","text":"(common) fun Feature.coordAll(): List <Position>? (jvm) fun Feature.coordAll(): List <Position>?","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature-collection/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.FeatureCollection Extensions for io.github.dellisd.spatialk.geojson.FeatureCollection Name Summary (common, jvm) coordAll fun FeatureCollection.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature-collection/#extensions-for-iogithubdellisdspatialkgeojsonfeaturecollection","text":"Name Summary (common, jvm) coordAll fun FeatureCollection.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.FeatureCollection"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature-collection/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.FeatureCollection / coordAll coordAll (common) fun FeatureCollection.coordAll(): List <Position> (jvm) fun FeatureCollection.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-feature-collection/coord-all/#coordall","text":"(common) fun FeatureCollection.coordAll(): List <Position> (jvm) fun FeatureCollection.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Geometry Extensions for io.github.dellisd.spatialk.geojson.Geometry Name Summary (common, jvm) coordAll fun Geometry.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry/#extensions-for-iogithubdellisdspatialkgeojsongeometry","text":"Name Summary (common, jvm) coordAll fun Geometry.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.Geometry"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Geometry / coordAll coordAll (common) fun Geometry.coordAll(): List <Position> (jvm) fun Geometry.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry/coord-all/#coordall","text":"(common) fun Geometry.coordAll(): List <Position> (jvm) fun Geometry.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry-collection/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.GeometryCollection Extensions for io.github.dellisd.spatialk.geojson.GeometryCollection Name Summary (common, jvm) coordAll fun GeometryCollection.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry-collection/#extensions-for-iogithubdellisdspatialkgeojsongeometrycollection","text":"Name Summary (common, jvm) coordAll fun GeometryCollection.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.GeometryCollection"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry-collection/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.GeometryCollection / coordAll coordAll (common) fun GeometryCollection.coordAll(): List <Position> (jvm) fun GeometryCollection.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-geometry-collection/coord-all/#coordall","text":"(common) fun GeometryCollection.coordAll(): List <Position> (jvm) fun GeometryCollection.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-line-string/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.LineString Extensions for io.github.dellisd.spatialk.geojson.LineString Name Summary (common, jvm) coordAll fun LineString.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-line-string/#extensions-for-iogithubdellisdspatialkgeojsonlinestring","text":"Name Summary (common, jvm) coordAll fun LineString.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.LineString"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-line-string/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.LineString / coordAll coordAll (common) fun LineString.coordAll(): List <Position> (jvm) fun LineString.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-line-string/coord-all/#coordall","text":"(common) fun LineString.coordAll(): List <Position> (jvm) fun LineString.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-line-string/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.MultiLineString Extensions for io.github.dellisd.spatialk.geojson.MultiLineString Name Summary (common, jvm) coordAll fun MultiLineString.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-line-string/#extensions-for-iogithubdellisdspatialkgeojsonmultilinestring","text":"Name Summary (common, jvm) coordAll fun MultiLineString.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.MultiLineString"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-line-string/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.MultiLineString / coordAll coordAll (common) fun MultiLineString.coordAll(): List <Position> (jvm) fun MultiLineString.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-line-string/coord-all/#coordall","text":"(common) fun MultiLineString.coordAll(): List <Position> (jvm) fun MultiLineString.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-point/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.MultiPoint Extensions for io.github.dellisd.spatialk.geojson.MultiPoint Name Summary (common, jvm) coordAll fun MultiPoint.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-point/#extensions-for-iogithubdellisdspatialkgeojsonmultipoint","text":"Name Summary (common, jvm) coordAll fun MultiPoint.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.MultiPoint"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-point/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.MultiPoint / coordAll coordAll (common) fun MultiPoint.coordAll(): List <Position> (jvm) fun MultiPoint.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-point/coord-all/#coordall","text":"(common) fun MultiPoint.coordAll(): List <Position> (jvm) fun MultiPoint.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-polygon/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.MultiPolygon Extensions for io.github.dellisd.spatialk.geojson.MultiPolygon Name Summary (common, jvm) coordAll fun MultiPolygon.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-polygon/#extensions-for-iogithubdellisdspatialkgeojsonmultipolygon","text":"Name Summary (common, jvm) coordAll fun MultiPolygon.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.MultiPolygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-polygon/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.MultiPolygon / coordAll coordAll (common) fun MultiPolygon.coordAll(): List <Position> (jvm) fun MultiPolygon.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-multi-polygon/coord-all/#coordall","text":"(common) fun MultiPolygon.coordAll(): List <Position> (jvm) fun MultiPolygon.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-point/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Point Extensions for io.github.dellisd.spatialk.geojson.Point Name Summary (common, jvm) coordAll fun Point.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-point/#extensions-for-iogithubdellisdspatialkgeojsonpoint","text":"Name Summary (common, jvm) coordAll fun Point.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.Point"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-point/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Point / coordAll coordAll (common) fun Point.coordAll(): List <Position> (jvm) fun Point.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-point/coord-all/#coordall","text":"(common) fun Point.coordAll(): List <Position> (jvm) fun Point.coordAll(): List <Position>","title":"coordAll"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-polygon/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Polygon Extensions for io.github.dellisd.spatialk.geojson.Polygon Name Summary (common, jvm) coordAll fun Polygon.coordAll(): List <Position>","title":"Index"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-polygon/#extensions-for-iogithubdellisdspatialkgeojsonpolygon","text":"Name Summary (common, jvm) coordAll fun Polygon.coordAll(): List <Position>","title":"Extensions for io.github.dellisd.spatialk.geojson.Polygon"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-polygon/coord-all/","text":"turf / io.github.dellisd.spatialk.turf / io.github.dellisd.spatialk.geojson.Polygon / coordAll coordAll (common) fun Polygon.coordAll(): List <Position> (jvm) fun Polygon.coordAll(): List <Position>","title":"Coord all"},{"location":"api/turf/io.github.dellisd.spatialk.turf/io.github.dellisd.spatialk.geojson.-polygon/coord-all/#coordall","text":"(common) fun Polygon.coordAll(): List <Position> (jvm) fun Polygon.coordAll(): List <Position>","title":"coordAll"}]}